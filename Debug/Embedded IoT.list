
Embedded IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006138  08006138  00007138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d8  080061d8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061dc  080061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080061e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d8  20000060  08006240  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004538  08006240  00008538  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f91  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d2  00000000  00000000  0002101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fce  00000000  00000000  00025b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ffd0  00000000  00000000  00026b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a25  00000000  00000000  00056ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012634b  00000000  00000000  0006f50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  0019589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0019b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08006120 	.word	0x08006120

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08006120 	.word	0x08006120

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	@ (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800058a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	2000007c 	.word	0x2000007c
 800059c:	2000011c 	.word	0x2000011c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b098      	sub	sp, #96	@ 0x60
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fbfa 	bl	8000d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f85d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f991 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 f971 	bl	8000898 <MX_DMA_Init>
  MX_ADC1_Init();
 80005b6:	f000 f8c3 	bl	8000740 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f93d 	bl	8000838 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of tx_mutex */
  osMutexDef(tx_mutex);
 80005be:	2300      	movs	r3, #0
 80005c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005c2:	2300      	movs	r3, #0
 80005c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tx_mutexHandle = osMutexCreate(osMutex(tx_mutex));
 80005c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fd56 	bl	800407c <osMutexCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a1e      	ldr	r2, [pc, #120]	@ (800064c <main+0xac>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <main+0xb0>)
 80005d8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fce3 	bl	8003fbc <osThreadCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <main+0xb4>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread1 */
  osThreadDef(Thread1, Thread1Funct, osPriorityIdle, 0, 256);
 80005fc:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <main+0xb8>)
 80005fe:	f107 0420 	add.w	r4, r7, #32
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fcd0 	bl	8003fbc <osThreadCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <main+0xbc>)
 8000620:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread2 */
  osThreadDef(Thread2, Thread2Funct, osPriorityIdle, 0, 256);
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <main+0xc0>)
 8000624:	1d3c      	adds	r4, r7, #4
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread2Handle = osThreadCreate(osThread(Thread2), NULL);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fcbf 	bl	8003fbc <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <main+0xc4>)
 8000642:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000644:	f003 fcb3 	bl	8003fae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0xa8>
 800064c:	20000658 	.word	0x20000658
 8000650:	08006144 	.word	0x08006144
 8000654:	2000064c 	.word	0x2000064c
 8000658:	08006168 	.word	0x08006168
 800065c:	20000650 	.word	0x20000650
 8000660:	0800618c 	.word	0x0800618c
 8000664:	20000654 	.word	0x20000654

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	@ 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fc62 	bl	8005f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f001 fbde 	bl	8001e4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <SystemClock_Config+0xd0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b0:	4a22      	ldr	r2, [pc, #136]	@ (800073c <SystemClock_Config+0xd4>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b20      	ldr	r3, [pc, #128]	@ (800073c <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006dc:	23c0      	movs	r3, #192	@ 0xc0
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fbbb 	bl	8001e6c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 f96a 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2103      	movs	r1, #3
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe52 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072a:	f000 f953 	bl	80009d4 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000752:	4b36      	ldr	r3, [pc, #216]	@ (800082c <MX_ADC1_Init+0xec>)
 8000754:	4a36      	ldr	r2, [pc, #216]	@ (8000830 <MX_ADC1_Init+0xf0>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000758:	4b34      	ldr	r3, [pc, #208]	@ (800082c <MX_ADC1_Init+0xec>)
 800075a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800075e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000760:	4b32      	ldr	r3, [pc, #200]	@ (800082c <MX_ADC1_Init+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000766:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_ADC1_Init+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <MX_ADC1_Init+0xec>)
 800076e:	2201      	movs	r2, #1
 8000770:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000772:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <MX_ADC1_Init+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <MX_ADC1_Init+0xec>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_ADC1_Init+0xec>)
 8000782:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <MX_ADC1_Init+0xf4>)
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <MX_ADC1_Init+0xec>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_ADC1_Init+0xec>)
 800078e:	2204      	movs	r2, #4
 8000790:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_ADC1_Init+0xec>)
 8000794:	2201      	movs	r2, #1
 8000796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_ADC1_Init+0xec>)
 800079c:	2201      	movs	r2, #1
 800079e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a0:	4822      	ldr	r0, [pc, #136]	@ (800082c <MX_ADC1_Init+0xec>)
 80007a2:	f000 fb29 	bl	8000df8 <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f912 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007b8:	2307      	movs	r3, #7
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	481a      	ldr	r0, [pc, #104]	@ (800082c <MX_ADC1_Init+0xec>)
 80007c2:	f000 fb5d 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 f902 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4813      	ldr	r0, [pc, #76]	@ (800082c <MX_ADC1_Init+0xec>)
 80007de:	f000 fb4f 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 f8f4 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ec:	2303      	movs	r3, #3
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_ADC1_Init+0xec>)
 80007fa:	f000 fb41 	bl	8000e80 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000804:	f000 f8e6 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000808:	2304      	movs	r3, #4
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800080c:	2304      	movs	r3, #4
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_ADC1_Init+0xec>)
 8000816:	f000 fb33 	bl	8000e80 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000820:	f000 f8d8 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000051c 	.word	0x2000051c
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_USART1_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART1_UART_Init+0x58>)
 800087c:	f002 feb2 	bl	80035e4 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f8a5 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200005c4 	.word	0x200005c4
 8000894:	40011000 	.word	0x40011000

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_DMA_Init+0x38>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <MX_DMA_Init+0x38>)
 80008a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_DMA_Init+0x38>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	2038      	movs	r0, #56	@ 0x38
 80008bc:	f000 fdec 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008c0:	2038      	movs	r0, #56	@ 0x38
 80008c2:	f000 fe05 	bl	80014d0 <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xa4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <MX_GPIO_Init+0xa4>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_GPIO_Init+0xa4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_GPIO_Init+0xa4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_GPIO_Init+0xa4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT3_Pin|OUTPUT4_Pin|OUTPUT1_Pin|OUTPUT2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	21f0      	movs	r1, #240	@ 0xf0
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <MX_GPIO_Init+0xa8>)
 8000950:	f001 fa62 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUTPUT3_Pin OUTPUT4_Pin OUTPUT1_Pin OUTPUT2_Pin */
  GPIO_InitStruct.Pin = OUTPUT3_Pin|OUTPUT4_Pin|OUTPUT1_Pin|OUTPUT2_Pin;
 8000954:	23f0      	movs	r3, #240	@ 0xf0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_GPIO_Init+0xa8>)
 800096c:	f001 f8a8 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f003 fb63 	bl	8004054 <osDelay>
 800098e:	e7fb      	b.n	8000988 <StartDefaultTask+0x8>

08000990 <Thread1Funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread1Funct */
void Thread1Funct(void const * argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread1Funct */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f003 fb5b 	bl	8004054 <osDelay>
 800099e:	e7fb      	b.n	8000998 <Thread1Funct+0x8>

080009a0 <Thread2Funct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2Funct */
void Thread2Funct(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2Funct */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f003 fb53 	bl	8004054 <osDelay>
 80009ae:	e7fb      	b.n	80009a8 <Thread2Funct+0x8>

080009b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009c2:	f000 f9f9 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40000400 	.word	0x40000400

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 fd3b 	bl	8001498 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b04 <HAL_ADC_MspInit+0xd4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d153      	bne.n	8000afa <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a2c      	ldr	r2, [pc, #176]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a26      	ldr	r2, [pc, #152]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <HAL_ADC_MspInit+0xd8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR4_Pin|SENSOR2_Pin|SENSOR3_Pin;
 8000a82:	231e      	movs	r3, #30
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <HAL_ADC_MspInit+0xdc>)
 8000a96:	f001 f813 	bl	8001ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b14 <HAL_ADC_MspInit+0xe4>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ac0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ade:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000ae0:	f000 fd04 	bl	80014ec <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000aea:	f7ff ff73 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000af2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000af4:	4a06      	ldr	r2, [pc, #24]	@ (8000b10 <HAL_ADC_MspInit+0xe0>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40012000 	.word	0x40012000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	20000564 	.word	0x20000564
 8000b14:	40026410 	.word	0x40026410

08000b18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2290      	movs	r2, #144	@ 0x90
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fa01 	bl	8005f40 <memset>
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <HAL_UART_MspInit+0xb0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d13b      	bne.n	8000bc0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b48:	2340      	movs	r3, #64	@ 0x40
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fe4f 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f7ff ff38 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b68:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000b94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_UART_MspInit+0xb8>)
 8000bbc:	f000 ff80 	bl	8001ac0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bc0:	bf00      	nop
 8000bc2:	37b8      	adds	r7, #184	@ 0xb8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000be4:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <HAL_InitTick+0xe0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a32      	ldr	r2, [pc, #200]	@ (8000cb4 <HAL_InitTick+0xe0>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <HAL_InitTick+0xe0>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fdc4 	bl	8002794 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c16:	f001 fd95 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8000c1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1e:	f001 fd91 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8000c22:	4603      	mov	r3, r0
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <HAL_InitTick+0xe4>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	3b01      	subs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <HAL_InitTick+0xec>)
 8000c3a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c48:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c5e:	f002 f9f3 	bl	8003048 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11b      	bne.n	8000ca8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c70:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <HAL_InitTick+0xe8>)
 8000c72:	f002 fa4b 	bl	800310c <HAL_TIM_Base_Start_IT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c84:	201d      	movs	r0, #29
 8000c86:	f000 fc23 	bl	80014d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d808      	bhi.n	8000ca2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	201d      	movs	r0, #29
 8000c96:	f000 fbff 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_InitTick+0xf0>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e002      	b.n	8000ca8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3738      	adds	r7, #56	@ 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	2000065c 	.word	0x2000065c
 8000cc0:	40000400 	.word	0x40000400
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f002 fa79 	bl	80031fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000065c 	.word	0x2000065c

08000d14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <DMA2_Stream0_IRQHandler+0x10>)
 8000d1a:	f000 fc95 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000564 	.word	0x20000564

08000d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d50:	f7ff ffea 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f005 f947 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fc0f 	bl	80005a0 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d90:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8000d94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d98:	20004538 	.word	0x20004538

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>

08000d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 fb6d 	bl	8001482 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff13 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dae:	f7ff fe17 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200006a8 	.word	0x200006a8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200006a8 	.word	0x200006a8

08000df8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e031      	b.n	8000e72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d109      	bne.n	8000e2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fe0a 	bl	8000a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_ADC_Init+0x84>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	f043 0202 	orr.w	r2, r3, #2
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f974 	bl	8001134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e62:	e001      	b.n	8000e68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	ffffeefd 	.word	0xffffeefd

08000e80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x1c>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e13a      	b.n	8001112 <HAL_ADC_ConfigChannel+0x292>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d93a      	bls.n	8000f22 <HAL_ADC_ConfigChannel+0xa2>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb4:	d035      	beq.n	8000f22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b1e      	subs	r3, #30
 8000ecc:	2207      	movs	r2, #7
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	400a      	ands	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8001120 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10a      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68d9      	ldr	r1, [r3, #12]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	061a      	lsls	r2, r3, #24
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000efa:	e039      	b.n	8000f70 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68d9      	ldr	r1, [r3, #12]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4403      	add	r3, r0
 8000f14:	3b1e      	subs	r3, #30
 8000f16:	409a      	lsls	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f20:	e026      	b.n	8000f70 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6919      	ldr	r1, [r3, #16]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43da      	mvns	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	400a      	ands	r2, r1
 8000f48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6919      	ldr	r1, [r3, #16]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4403      	add	r3, r0
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	409a      	lsls	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d824      	bhi.n	8000fc2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b05      	subs	r3, #5
 8000f8a:	221f      	movs	r2, #31
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43da      	mvns	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	400a      	ands	r2, r1
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b05      	subs	r3, #5
 8000fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fc0:	e04c      	b.n	800105c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b0c      	cmp	r3, #12
 8000fc8:	d824      	bhi.n	8001014 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b23      	subs	r3, #35	@ 0x23
 8000fdc:	221f      	movs	r2, #31
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	400a      	ands	r2, r1
 8000fea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b23      	subs	r3, #35	@ 0x23
 8001006:	fa00 f203 	lsl.w	r2, r0, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	631a      	str	r2, [r3, #48]	@ 0x30
 8001012:	e023      	b.n	800105c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b41      	subs	r3, #65	@ 0x41
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43da      	mvns	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	400a      	ands	r2, r1
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b41      	subs	r3, #65	@ 0x41
 8001050:	fa00 f203 	lsl.w	r2, r0, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <HAL_ADC_ConfigChannel+0x2a4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10a      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1fc>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800106e:	d105      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001070:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a2c      	ldr	r2, [pc, #176]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 8001076:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800107a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a28      	ldr	r2, [pc, #160]	@ (8001124 <HAL_ADC_ConfigChannel+0x2a4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10f      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x226>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d10b      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a25      	ldr	r2, [pc, #148]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 8001094:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001098:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800109a:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a22      	ldr	r2, [pc, #136]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 80010a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_ADC_ConfigChannel+0x2a4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d12b      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x288>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <HAL_ADC_ConfigChannel+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d003      	beq.n	80010c2 <HAL_ADC_ConfigChannel+0x242>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b11      	cmp	r3, #17
 80010c0:	d122      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 80010c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <HAL_ADC_ConfigChannel+0x2a8>)
 80010d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <HAL_ADC_ConfigChannel+0x2a0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d111      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_ADC_ConfigChannel+0x2ac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <HAL_ADC_ConfigChannel+0x2b0>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9a      	lsrs	r2, r3, #18
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80010fa:	e002      	b.n	8001102 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f9      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	10000012 	.word	0x10000012
 8001124:	40012000 	.word	0x40012000
 8001128:	40012300 	.word	0x40012300
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83

08001134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800113c:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <ADC_Init+0x1ec>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a77      	ldr	r2, [pc, #476]	@ (8001320 <ADC_Init+0x1ec>)
 8001142:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001146:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001148:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <ADC_Init+0x1ec>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4973      	ldr	r1, [pc, #460]	@ (8001320 <ADC_Init+0x1ec>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	021a      	lsls	r2, r3, #8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	4a58      	ldr	r2, [pc, #352]	@ (8001324 <ADC_Init+0x1f0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d022      	beq.n	800120e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80011d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6899      	ldr	r1, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80011f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6899      	ldr	r1, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e00f      	b.n	800122e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800121c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800122c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0202 	bic.w	r2, r2, #2
 800123c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6899      	ldr	r1, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	005a      	lsls	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01b      	beq.n	8001294 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800126a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800127a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	3b01      	subs	r3, #1
 8001288:	035a      	lsls	r2, r3, #13
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	e007      	b.n	80012a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80012b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	3b01      	subs	r3, #1
 80012c0:	051a      	lsls	r2, r3, #20
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80012d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012e6:	025a      	lsls	r2, r3, #9
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6899      	ldr	r1, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	029a      	lsls	r2, r3, #10
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40012300 	.word	0x40012300
 8001324:	0f000001 	.word	0x0f000001

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0000 	.word	0x05fa0000

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	@ (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	@ (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	@ (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	@ 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff4c 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014aa:	f7ff ff61 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ffb1 	bl	800141c <NVIC_EncodePriority>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff80 	bl	80013c8 <__NVIC_SetPriority>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff54 	bl	800138c <__NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff fc72 	bl	8000de0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e099      	b.n	800163c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001528:	e00f      	b.n	800154a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152a:	f7ff fc59 	bl	8000de0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b05      	cmp	r3, #5
 8001536:	d908      	bls.n	800154a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e078      	b.n	800163c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e8      	bne.n	800152a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <HAL_DMA_Init+0x158>)
 8001564:	4013      	ands	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d107      	bne.n	80015b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	4313      	orrs	r3, r2
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f023 0307 	bic.w	r3, r3, #7
 80015ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d117      	bne.n	800160e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f9e9 	bl	80019c8 <DMA_CheckFifoParam>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2240      	movs	r2, #64	@ 0x40
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800160a:	2301      	movs	r3, #1
 800160c:	e016      	b.n	800163c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f9a0 	bl	800195c <DMA_CalcBaseAndBitshift>
 800161c:	4603      	mov	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	223f      	movs	r2, #63	@ 0x3f
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	e010803f 	.word	0xe010803f

08001648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001654:	4b8e      	ldr	r3, [pc, #568]	@ (8001890 <HAL_DMA_IRQHandler+0x248>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a8e      	ldr	r2, [pc, #568]	@ (8001894 <HAL_DMA_IRQHandler+0x24c>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0a9b      	lsrs	r3, r3, #10
 8001660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001672:	2208      	movs	r2, #8
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	2208      	movs	r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2201      	movs	r2, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ee:	2204      	movs	r2, #4
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	2204      	movs	r2, #4
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001724:	2210      	movs	r2, #16
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d043      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03c      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	2210      	movs	r2, #16
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d018      	beq.n	800178a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
 8001776:	e01f      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
 8001788:	e016      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0208 	bic.w	r2, r2, #8
 80017a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2220      	movs	r2, #32
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 808f 	beq.w	80018e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8087 	beq.w	80018e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017de:	2220      	movs	r2, #32
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d136      	bne.n	8001860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0216 	bic.w	r2, r2, #22
 8001800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_DMA_IRQHandler+0x1da>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	223f      	movs	r2, #63	@ 0x3f
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001852:	2b00      	cmp	r3, #0
 8001854:	d07e      	beq.n	8001954 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
        }
        return;
 800185e:	e079      	b.n	8001954 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01d      	beq.n	80018aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	2b00      	cmp	r3, #0
 8001882:	d031      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e02c      	b.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	e01e      	b.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0210 	bic.w	r2, r2, #16
 80018c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d032      	beq.n	8001956 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d022      	beq.n	8001942 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2205      	movs	r2, #5
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3301      	adds	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	d307      	bcc.n	8001930 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f2      	bne.n	8001914 <HAL_DMA_IRQHandler+0x2cc>
 800192e:	e000      	b.n	8001932 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001930:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
 8001952:	e000      	b.n	8001956 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001954:	bf00      	nop
    }
  }
}
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b10      	subs	r3, #16
 800196c:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <DMA_CalcBaseAndBitshift+0x60>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <DMA_CalcBaseAndBitshift+0x64>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d908      	bls.n	800199c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001992:	4013      	ands	r3, r2
 8001994:	1d1a      	adds	r2, r3, #4
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	@ 0x58
 800199a:	e006      	b.n	80019aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	aaaaaaab 	.word	0xaaaaaaab
 80019c0:	080061c8 	.word	0x080061c8
 80019c4:	fffffc00 	.word	0xfffffc00

080019c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d856      	bhi.n	8001a96 <DMA_CheckFifoParam+0xce>
 80019e8:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <DMA_CheckFifoParam+0x28>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a13 	.word	0x08001a13
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a97 	.word	0x08001a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d046      	beq.n	8001a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e043      	b.n	8001a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a1a:	d140      	bne.n	8001a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a20:	e03d      	b.n	8001a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2a:	d121      	bne.n	8001a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d837      	bhi.n	8001aa2 <DMA_CheckFifoParam+0xda>
 8001a32:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <DMA_CheckFifoParam+0x70>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a4f 	.word	0x08001a4f
 8001a40:	08001a49 	.word	0x08001a49
 8001a44:	08001a61 	.word	0x08001a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4c:	e030      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d025      	beq.n	8001aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5e:	e022      	b.n	8001aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a68:	d11f      	bne.n	8001aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a6e:	e01c      	b.n	8001aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d903      	bls.n	8001a7e <DMA_CheckFifoParam+0xb6>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d003      	beq.n	8001a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a7c:	e018      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
      break;
 8001a82:	e015      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      break;
 8001a94:	e00b      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001a96:	bf00      	nop
 8001a98:	e00a      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e008      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e006      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa2:	bf00      	nop
 8001aa4:	e004      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
 8001aa8:	e002      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aae:	bf00      	nop
    }
  } 
  
  return status; 
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e175      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8164 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d005      	beq.n	8001b16 <HAL_GPIO_Init+0x56>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d017      	beq.n	8001bb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80be 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b66      	ldr	r3, [pc, #408]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c62:	4a61      	ldr	r2, [pc, #388]	@ (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	@ (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	@ (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	@ (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	@ (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae86 	bls.w	8001ae0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e29b      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8087 	beq.w	8001f9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e90:	4b96      	ldr	r3, [pc, #600]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9c:	4b93      	ldr	r3, [pc, #588]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d112      	bne.n	8001ece <HAL_RCC_OscConfig+0x62>
 8001ea8:	4b90      	ldr	r3, [pc, #576]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d06c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x130>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d168      	bne.n	8001f9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e275      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x7a>
 8001ed8:	4b84      	ldr	r3, [pc, #528]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a83      	ldr	r2, [pc, #524]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e02e      	b.n	8001f44 <HAL_RCC_OscConfig+0xd8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x9c>
 8001eee:	4b7f      	ldr	r3, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7b      	ldr	r2, [pc, #492]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xd8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0xc0>
 8001f12:	4b76      	ldr	r3, [pc, #472]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a75      	ldr	r2, [pc, #468]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b73      	ldr	r3, [pc, #460]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a72      	ldr	r2, [pc, #456]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xd8>
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6e      	ldr	r2, [pc, #440]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b6c      	ldr	r3, [pc, #432]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6b      	ldr	r2, [pc, #428]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe ff48 	bl	8000de0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe ff44 	bl	8000de0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e229      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b61      	ldr	r3, [pc, #388]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe8>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe ff34 	bl	8000de0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe ff30 	bl	8000de0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e215      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x110>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d069      	beq.n	800207e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	4b50      	ldr	r3, [pc, #320]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x190>
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1e9      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	493d      	ldr	r1, [pc, #244]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e040      	b.n	800207e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a38      	ldr	r2, [pc, #224]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fee6 	bl	8000de0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fee2 	bl	8000de0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1c7      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b30      	ldr	r3, [pc, #192]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b2d      	ldr	r3, [pc, #180]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4929      	ldr	r1, [pc, #164]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
 800204a:	e018      	b.n	800207e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204c:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a26      	ldr	r2, [pc, #152]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fec2 	bl	8000de0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe febe 	bl	8000de0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1a3      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d038      	beq.n	80020fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d019      	beq.n	80020c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002096:	4a15      	ldr	r2, [pc, #84]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fe9f 	bl	8000de0 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe fe9b 	bl	8000de0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e180      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x23a>
 80020c4:	e01a      	b.n	80020fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 80020c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <HAL_RCC_OscConfig+0x280>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fe85 	bl	8000de0 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe fe81 	bl	8000de0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d903      	bls.n	80020f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e166      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
 80020ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b92      	ldr	r3, [pc, #584]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a4 	beq.w	8002252 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a88      	ldr	r2, [pc, #544]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b86      	ldr	r3, [pc, #536]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002132:	4b83      	ldr	r3, [pc, #524]	@ (8002340 <HAL_RCC_OscConfig+0x4d4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800213e:	4b80      	ldr	r3, [pc, #512]	@ (8002340 <HAL_RCC_OscConfig+0x4d4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7f      	ldr	r2, [pc, #508]	@ (8002340 <HAL_RCC_OscConfig+0x4d4>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe fe49 	bl	8000de0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe fe45 	bl	8000de0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	@ 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e12a      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x4d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x31a>
 8002178:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217c:	4a6f      	ldr	r2, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	@ 0x70
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_OscConfig+0x376>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x33c>
 800218e:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002192:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	@ 0x70
 800219a:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x376>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x35e>
 80021b0:	4b62      	ldr	r3, [pc, #392]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a61      	ldr	r2, [pc, #388]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80021bc:	4b5f      	ldr	r3, [pc, #380]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c0:	4a5e      	ldr	r2, [pc, #376]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x376>
 80021ca:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a5b      	ldr	r2, [pc, #364]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d6:	4b59      	ldr	r3, [pc, #356]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fdf9 	bl	8000de0 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fdf5 	bl	8000de0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0d8      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x386>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fde3 	bl	8000de0 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fddf 	bl	8000de0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0c2      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b41      	ldr	r3, [pc, #260]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80ae 	beq.w	80023b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b37      	ldr	r3, [pc, #220]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d06d      	beq.n	8002344 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d14b      	bne.n	8002308 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fdb0 	bl	8000de0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fdac 	bl	8000de0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e091      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	491b      	ldr	r1, [pc, #108]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a18      	ldr	r2, [pc, #96]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fd7e 	bl	8000de0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fd7a 	bl	8000de0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e05f      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x47c>
 8002306:	e057      	b.n	80023b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fd64 	bl	8000de0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fd60 	bl	8000de0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e045      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCC_OscConfig+0x4d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x4b0>
 800233a:	e03d      	b.n	80023b8 <HAL_RCC_OscConfig+0x54c>
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_RCC_OscConfig+0x558>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d030      	beq.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d122      	bne.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800237a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800237c:	4293      	cmp	r3, r2
 800237e:	d119      	bne.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d10f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d0      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b67      	ldr	r3, [pc, #412]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	4965      	ldr	r1, [pc, #404]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800244a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d040      	beq.n	80024ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d115      	bne.n	80024aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e073      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06b      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4936      	ldr	r1, [pc, #216]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024bc:	f7fe fc90 	bl	8000de0 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7fe fc8c 	bl	8000de0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e053      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d210      	bcs.n	800251c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 020f 	bic.w	r2, r3, #15
 8002502:	4922      	ldr	r1, [pc, #136]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	@ (8002594 <HAL_RCC_ClockConfig+0x1cc>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1d0>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1d4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fb2a 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00
 8002590:	40023800 	.word	0x40023800
 8002594:	080061b0 	.word	0x080061b0
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b090      	sub	sp, #64	@ 0x40
 80025a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d00d      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x40>
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	f200 80a1 	bhi.w	800270c <HAL_RCC_GetSysClockFreq+0x16c>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x3a>
 80025d2:	e09b      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x184>)
 80025d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d8:	e09b      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b53      	ldr	r3, [pc, #332]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025de:	e098      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	627a      	str	r2, [r7, #36]	@ 0x24
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002608:	2100      	movs	r1, #0
 800260a:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 800260c:	fb03 f201 	mul.w	r2, r3, r1
 8002610:	2300      	movs	r3, #0
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	4413      	add	r3, r2
 8002618:	4a43      	ldr	r2, [pc, #268]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x188>)
 800261a:	fba0 1202 	umull	r1, r2, r0, r2
 800261e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002620:	460a      	mov	r2, r1
 8002622:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002626:	4413      	add	r3, r2
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	2200      	movs	r2, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	61fa      	str	r2, [r7, #28]
 8002632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800263a:	f7fd fe01 	bl	8000240 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4613      	mov	r3, r2
 8002644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002646:	e053      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	2200      	movs	r2, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	617a      	str	r2, [r7, #20]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800265a:	f04f 0b00 	mov.w	fp, #0
 800265e:	4652      	mov	r2, sl
 8002660:	465b      	mov	r3, fp
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	0159      	lsls	r1, r3, #5
 800266c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002670:	0150      	lsls	r0, r2, #5
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	ebb2 080a 	subs.w	r8, r2, sl
 800267a:	eb63 090b 	sbc.w	r9, r3, fp
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800268a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800268e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002692:	ebb2 0408 	subs.w	r4, r2, r8
 8002696:	eb63 0509 	sbc.w	r5, r3, r9
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	00eb      	lsls	r3, r5, #3
 80026a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a8:	00e2      	lsls	r2, r4, #3
 80026aa:	4614      	mov	r4, r2
 80026ac:	461d      	mov	r5, r3
 80026ae:	eb14 030a 	adds.w	r3, r4, sl
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	eb45 030b 	adc.w	r3, r5, fp
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c6:	4629      	mov	r1, r5
 80026c8:	028b      	lsls	r3, r1, #10
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d0:	4621      	mov	r1, r4
 80026d2:	028a      	lsls	r2, r1, #10
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026da:	2200      	movs	r2, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e4:	f7fd fdac 	bl	8000240 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002700:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x184>)
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002714:	4618      	mov	r0, r3
 8002716:	3740      	adds	r7, #64	@ 0x40
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	017d7840 	.word	0x017d7840

0800272c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	080061c0 	.word	0x080061c0

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	080061c0 	.word	0x080061c0

08002794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	220f      	movs	r2, #15
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d6:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <HAL_RCC_GetClockConfig+0x60>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002820:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a68      	ldr	r2, [pc, #416]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002826:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800282a:	6093      	str	r3, [r2, #8]
 800282c:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	4964      	ldr	r1, [pc, #400]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002852:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	4959      	ldr	r1, [pc, #356]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d017      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002894:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	494a      	ldr	r1, [pc, #296]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ac:	d101      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 808b 	beq.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	4a39      	ldr	r2, [pc, #228]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a34      	ldr	r2, [pc, #208]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe fa6e 	bl	8000de0 <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fa6a 	bl	8000de0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e38f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800291a:	4b2c      	ldr	r3, [pc, #176]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002926:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d035      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d02e      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002944:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a1a      	ldr	r2, [pc, #104]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002966:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800296c:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d114      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fa32 	bl	8000de0 <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe fa2e 	bl	8000de0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e351      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ee      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029ae:	d111      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029be:	400b      	ands	r3, r1
 80029c0:	4901      	ldr	r1, [pc, #4]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
 80029d0:	0ffffcff 	.word	0x0ffffcff
 80029d4:	4bac      	ldr	r3, [pc, #688]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4aab      	ldr	r2, [pc, #684]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029de:	6093      	str	r3, [r2, #8]
 80029e0:	4ba9      	ldr	r3, [pc, #676]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	49a6      	ldr	r1, [pc, #664]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a04:	4aa0      	ldr	r2, [pc, #640]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	499b      	ldr	r1, [pc, #620]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2c:	4b96      	ldr	r3, [pc, #600]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a3a:	4993      	ldr	r1, [pc, #588]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4e:	4b8e      	ldr	r3, [pc, #568]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a5c:	498a      	ldr	r1, [pc, #552]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a70:	4b85      	ldr	r3, [pc, #532]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a7e:	4982      	ldr	r1, [pc, #520]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a92:	4b7d      	ldr	r3, [pc, #500]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4979      	ldr	r1, [pc, #484]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab4:	4b74      	ldr	r3, [pc, #464]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	4971      	ldr	r1, [pc, #452]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	f023 020c 	bic.w	r2, r3, #12
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae4:	4968      	ldr	r1, [pc, #416]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af8:	4b63      	ldr	r3, [pc, #396]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	4960      	ldr	r1, [pc, #384]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b28:	4957      	ldr	r1, [pc, #348]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b3c:	4b52      	ldr	r3, [pc, #328]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	494f      	ldr	r1, [pc, #316]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	4946      	ldr	r1, [pc, #280]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b80:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	493e      	ldr	r1, [pc, #248]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb0:	4935      	ldr	r1, [pc, #212]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bc4:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bd2:	492d      	ldr	r1, [pc, #180]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d011      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002be6:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bf4:	4924      	ldr	r1, [pc, #144]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c34:	4914      	ldr	r1, [pc, #80]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c58:	490b      	ldr	r1, [pc, #44]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00f      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c7c:	4902      	ldr	r1, [pc, #8]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c84:	e002      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c98:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	4986      	ldr	r1, [pc, #536]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cbc:	4b81      	ldr	r3, [pc, #516]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ccc:	497d      	ldr	r1, [pc, #500]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d006      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80d6 	beq.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce8:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a75      	ldr	r2, [pc, #468]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f874 	bl	8000de0 <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cfc:	f7fe f870 	bl	8000de0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e195      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d021      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11d      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d2e:	4b65      	ldr	r3, [pc, #404]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d3c:	4b61      	ldr	r3, [pc, #388]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d42:	0e1b      	lsrs	r3, r3, #24
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	4958      	ldr	r1, [pc, #352]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02e      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d94:	d129      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d96:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002da4:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002daa:	0f1b      	lsrs	r3, r3, #28
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	019a      	lsls	r2, r3, #6
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	061b      	lsls	r3, r3, #24
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	071b      	lsls	r3, r3, #28
 8002dca:	493e      	ldr	r1, [pc, #248]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd8:	f023 021f 	bic.w	r2, r3, #31
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4938      	ldr	r1, [pc, #224]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dfc:	0e1b      	lsrs	r3, r3, #24
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	0f1b      	lsrs	r3, r3, #28
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	019a      	lsls	r2, r3, #6
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	071b      	lsls	r3, r3, #28
 8002e2a:	4926      	ldr	r1, [pc, #152]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d011      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	019a      	lsls	r2, r3, #6
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	071b      	lsls	r3, r3, #28
 8002e5a:	491a      	ldr	r1, [pc, #104]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e62:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6e:	f7fd ffb7 	bl	8000de0 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e76:	f7fd ffb3 	bl	8000de0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	@ 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0d8      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 80ce 	bne.w	8003038 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fd ff9a 	bl	8000de0 <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb0:	f7fd ff96 	bl	8000de0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d904      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0bb      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed4:	d0ec      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02e      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d12a      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002efe:	4b51      	ldr	r3, [pc, #324]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	0f1b      	lsrs	r3, r3, #28
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	4944      	ldr	r1, [pc, #272]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f3a:	4b42      	ldr	r3, [pc, #264]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	493d      	ldr	r1, [pc, #244]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d022      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f68:	d11d      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f6a:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	0e1b      	lsrs	r3, r3, #24
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f78:	4b32      	ldr	r3, [pc, #200]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	0f1b      	lsrs	r3, r3, #28
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	4929      	ldr	r1, [pc, #164]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d028      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc0:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	4917      	ldr	r1, [pc, #92]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	4911      	ldr	r1, [pc, #68]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003004:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0e      	ldr	r2, [pc, #56]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003010:	f7fd fee6 	bl	8000de0 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003018:	f7fd fee2 	bl	8000de0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	@ 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e007      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003036:	d1ef      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e049      	b.n	80030ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f841 	bl	80030f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f000 f9e8 	bl	800345c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e054      	b.n	80031ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_TIM_Base_Start_IT+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314e:	d01d      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_TIM_Base_Start_IT+0xe0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x80>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d115      	bne.n	80031b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_TIM_Base_Start_IT+0xec>)
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d015      	beq.n	80031ca <HAL_TIM_Base_Start_IT+0xbe>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d011      	beq.n	80031ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	e008      	b.n	80031ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e000      	b.n	80031cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40010400 	.word	0x40010400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40001800 	.word	0x40001800
 80031f8:	00010007 	.word	0x00010007

080031fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0202 	mvn.w	r2, #2
 8003230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8e9 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8db 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8ec 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0204 	mvn.w	r2, #4
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8c3 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8b5 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8c6 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0208 	mvn.w	r2, #8
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2204      	movs	r2, #4
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f89d 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f88f 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8a0 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0210 	mvn.w	r2, #16
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2208      	movs	r2, #8
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f877 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f869 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f87a 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0201 	mvn.w	r2, #1
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fb24 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800338e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f913 	bl	80035bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f90b 	bl	80035d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f834 	bl	8003446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0220 	mvn.w	r2, #32
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8d3 	bl	80035a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a43      	ldr	r2, [pc, #268]	@ (800357c <TIM_Base_SetConfig+0x120>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347a:	d00f      	beq.n	800349c <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a40      	ldr	r2, [pc, #256]	@ (8003580 <TIM_Base_SetConfig+0x124>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00b      	beq.n	800349c <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3f      	ldr	r2, [pc, #252]	@ (8003584 <TIM_Base_SetConfig+0x128>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3e      	ldr	r2, [pc, #248]	@ (8003588 <TIM_Base_SetConfig+0x12c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3d      	ldr	r2, [pc, #244]	@ (800358c <TIM_Base_SetConfig+0x130>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a32      	ldr	r2, [pc, #200]	@ (800357c <TIM_Base_SetConfig+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02b      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d027      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003580 <TIM_Base_SetConfig+0x124>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d023      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003584 <TIM_Base_SetConfig+0x128>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003588 <TIM_Base_SetConfig+0x12c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2c      	ldr	r2, [pc, #176]	@ (800358c <TIM_Base_SetConfig+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d017      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <TIM_Base_SetConfig+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003594 <TIM_Base_SetConfig+0x138>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00f      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <TIM_Base_SetConfig+0x13c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a28      	ldr	r2, [pc, #160]	@ (800359c <TIM_Base_SetConfig+0x140>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <TIM_Base_SetConfig+0x144>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a26      	ldr	r2, [pc, #152]	@ (80035a4 <TIM_Base_SetConfig+0x148>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <TIM_Base_SetConfig+0x120>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_Base_SetConfig+0xf2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a10      	ldr	r2, [pc, #64]	@ (800358c <TIM_Base_SetConfig+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d103      	bne.n	8003556 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40010400 	.word	0x40010400
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800
 800359c:	40001800 	.word	0x40001800
 80035a0:	40001c00 	.word	0x40001c00
 80035a4:	40002000 	.word	0x40002000

080035a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e040      	b.n	8003678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fa86 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	@ 0x24
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa8c 	bl	8003b48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f825 	bl	8003680 <UART_SetConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e01b      	b.n	8003678 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800364e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800365e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fb0b 	bl	8003c8c <UART_CheckIdleState>
 8003676:	4603      	mov	r3, r0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4ba6      	ldr	r3, [pc, #664]	@ (8003944 <UART_SetConfig+0x2c4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a94      	ldr	r2, [pc, #592]	@ (8003948 <UART_SetConfig+0x2c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d120      	bne.n	800373e <UART_SetConfig+0xbe>
 80036fc:	4b93      	ldr	r3, [pc, #588]	@ (800394c <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d816      	bhi.n	8003738 <UART_SetConfig+0xb8>
 800370a:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <UART_SetConfig+0x90>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003727 	.word	0x08003727
 800371c:	08003733 	.word	0x08003733
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e150      	b.n	80039c8 <UART_SetConfig+0x348>
 8003726:	2302      	movs	r3, #2
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e14d      	b.n	80039c8 <UART_SetConfig+0x348>
 800372c:	2304      	movs	r3, #4
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e14a      	b.n	80039c8 <UART_SetConfig+0x348>
 8003732:	2308      	movs	r3, #8
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e147      	b.n	80039c8 <UART_SetConfig+0x348>
 8003738:	2310      	movs	r3, #16
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e144      	b.n	80039c8 <UART_SetConfig+0x348>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a83      	ldr	r2, [pc, #524]	@ (8003950 <UART_SetConfig+0x2d0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d132      	bne.n	80037ae <UART_SetConfig+0x12e>
 8003748:	4b80      	ldr	r3, [pc, #512]	@ (800394c <UART_SetConfig+0x2cc>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d828      	bhi.n	80037a8 <UART_SetConfig+0x128>
 8003756:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <UART_SetConfig+0xdc>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003791 	.word	0x08003791
 8003760:	080037a9 	.word	0x080037a9
 8003764:	080037a9 	.word	0x080037a9
 8003768:	080037a9 	.word	0x080037a9
 800376c:	0800379d 	.word	0x0800379d
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037a9 	.word	0x080037a9
 8003778:	080037a9 	.word	0x080037a9
 800377c:	08003797 	.word	0x08003797
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037a9 	.word	0x080037a9
 800378c:	080037a3 	.word	0x080037a3
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e118      	b.n	80039c8 <UART_SetConfig+0x348>
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e115      	b.n	80039c8 <UART_SetConfig+0x348>
 800379c:	2304      	movs	r3, #4
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e112      	b.n	80039c8 <UART_SetConfig+0x348>
 80037a2:	2308      	movs	r3, #8
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e10f      	b.n	80039c8 <UART_SetConfig+0x348>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e10c      	b.n	80039c8 <UART_SetConfig+0x348>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a68      	ldr	r2, [pc, #416]	@ (8003954 <UART_SetConfig+0x2d4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d120      	bne.n	80037fa <UART_SetConfig+0x17a>
 80037b8:	4b64      	ldr	r3, [pc, #400]	@ (800394c <UART_SetConfig+0x2cc>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037c2:	2b30      	cmp	r3, #48	@ 0x30
 80037c4:	d013      	beq.n	80037ee <UART_SetConfig+0x16e>
 80037c6:	2b30      	cmp	r3, #48	@ 0x30
 80037c8:	d814      	bhi.n	80037f4 <UART_SetConfig+0x174>
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d009      	beq.n	80037e2 <UART_SetConfig+0x162>
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d810      	bhi.n	80037f4 <UART_SetConfig+0x174>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <UART_SetConfig+0x15c>
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d006      	beq.n	80037e8 <UART_SetConfig+0x168>
 80037da:	e00b      	b.n	80037f4 <UART_SetConfig+0x174>
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0f2      	b.n	80039c8 <UART_SetConfig+0x348>
 80037e2:	2302      	movs	r3, #2
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e0ef      	b.n	80039c8 <UART_SetConfig+0x348>
 80037e8:	2304      	movs	r3, #4
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e0ec      	b.n	80039c8 <UART_SetConfig+0x348>
 80037ee:	2308      	movs	r3, #8
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e0e9      	b.n	80039c8 <UART_SetConfig+0x348>
 80037f4:	2310      	movs	r3, #16
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e0e6      	b.n	80039c8 <UART_SetConfig+0x348>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	@ (8003958 <UART_SetConfig+0x2d8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d120      	bne.n	8003846 <UART_SetConfig+0x1c6>
 8003804:	4b51      	ldr	r3, [pc, #324]	@ (800394c <UART_SetConfig+0x2cc>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800380e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003810:	d013      	beq.n	800383a <UART_SetConfig+0x1ba>
 8003812:	2bc0      	cmp	r3, #192	@ 0xc0
 8003814:	d814      	bhi.n	8003840 <UART_SetConfig+0x1c0>
 8003816:	2b80      	cmp	r3, #128	@ 0x80
 8003818:	d009      	beq.n	800382e <UART_SetConfig+0x1ae>
 800381a:	2b80      	cmp	r3, #128	@ 0x80
 800381c:	d810      	bhi.n	8003840 <UART_SetConfig+0x1c0>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <UART_SetConfig+0x1a8>
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x1b4>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x1c0>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0cc      	b.n	80039c8 <UART_SetConfig+0x348>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0c9      	b.n	80039c8 <UART_SetConfig+0x348>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0c6      	b.n	80039c8 <UART_SetConfig+0x348>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0c3      	b.n	80039c8 <UART_SetConfig+0x348>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0c0      	b.n	80039c8 <UART_SetConfig+0x348>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a44      	ldr	r2, [pc, #272]	@ (800395c <UART_SetConfig+0x2dc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d125      	bne.n	800389c <UART_SetConfig+0x21c>
 8003850:	4b3e      	ldr	r3, [pc, #248]	@ (800394c <UART_SetConfig+0x2cc>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800385e:	d017      	beq.n	8003890 <UART_SetConfig+0x210>
 8003860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003864:	d817      	bhi.n	8003896 <UART_SetConfig+0x216>
 8003866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386a:	d00b      	beq.n	8003884 <UART_SetConfig+0x204>
 800386c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003870:	d811      	bhi.n	8003896 <UART_SetConfig+0x216>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <UART_SetConfig+0x1fe>
 8003876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387a:	d006      	beq.n	800388a <UART_SetConfig+0x20a>
 800387c:	e00b      	b.n	8003896 <UART_SetConfig+0x216>
 800387e:	2300      	movs	r3, #0
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0a1      	b.n	80039c8 <UART_SetConfig+0x348>
 8003884:	2302      	movs	r3, #2
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e09e      	b.n	80039c8 <UART_SetConfig+0x348>
 800388a:	2304      	movs	r3, #4
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e09b      	b.n	80039c8 <UART_SetConfig+0x348>
 8003890:	2308      	movs	r3, #8
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e098      	b.n	80039c8 <UART_SetConfig+0x348>
 8003896:	2310      	movs	r3, #16
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e095      	b.n	80039c8 <UART_SetConfig+0x348>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <UART_SetConfig+0x2e0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d125      	bne.n	80038f2 <UART_SetConfig+0x272>
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <UART_SetConfig+0x2cc>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b4:	d017      	beq.n	80038e6 <UART_SetConfig+0x266>
 80038b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ba:	d817      	bhi.n	80038ec <UART_SetConfig+0x26c>
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c0:	d00b      	beq.n	80038da <UART_SetConfig+0x25a>
 80038c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c6:	d811      	bhi.n	80038ec <UART_SetConfig+0x26c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <UART_SetConfig+0x254>
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d0:	d006      	beq.n	80038e0 <UART_SetConfig+0x260>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x26c>
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e076      	b.n	80039c8 <UART_SetConfig+0x348>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e073      	b.n	80039c8 <UART_SetConfig+0x348>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e070      	b.n	80039c8 <UART_SetConfig+0x348>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e06d      	b.n	80039c8 <UART_SetConfig+0x348>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e06a      	b.n	80039c8 <UART_SetConfig+0x348>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <UART_SetConfig+0x2e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d138      	bne.n	800396e <UART_SetConfig+0x2ee>
 80038fc:	4b13      	ldr	r3, [pc, #76]	@ (800394c <UART_SetConfig+0x2cc>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003906:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800390a:	d017      	beq.n	800393c <UART_SetConfig+0x2bc>
 800390c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003910:	d82a      	bhi.n	8003968 <UART_SetConfig+0x2e8>
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003916:	d00b      	beq.n	8003930 <UART_SetConfig+0x2b0>
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391c:	d824      	bhi.n	8003968 <UART_SetConfig+0x2e8>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <UART_SetConfig+0x2aa>
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x2b6>
 8003928:	e01e      	b.n	8003968 <UART_SetConfig+0x2e8>
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e04b      	b.n	80039c8 <UART_SetConfig+0x348>
 8003930:	2302      	movs	r3, #2
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e048      	b.n	80039c8 <UART_SetConfig+0x348>
 8003936:	2304      	movs	r3, #4
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e045      	b.n	80039c8 <UART_SetConfig+0x348>
 800393c:	2308      	movs	r3, #8
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e042      	b.n	80039c8 <UART_SetConfig+0x348>
 8003942:	bf00      	nop
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	40011000 	.word	0x40011000
 800394c:	40023800 	.word	0x40023800
 8003950:	40004400 	.word	0x40004400
 8003954:	40004800 	.word	0x40004800
 8003958:	40004c00 	.word	0x40004c00
 800395c:	40005000 	.word	0x40005000
 8003960:	40011400 	.word	0x40011400
 8003964:	40007800 	.word	0x40007800
 8003968:	2310      	movs	r3, #16
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e02c      	b.n	80039c8 <UART_SetConfig+0x348>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a72      	ldr	r2, [pc, #456]	@ (8003b3c <UART_SetConfig+0x4bc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d125      	bne.n	80039c4 <UART_SetConfig+0x344>
 8003978:	4b71      	ldr	r3, [pc, #452]	@ (8003b40 <UART_SetConfig+0x4c0>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003982:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003986:	d017      	beq.n	80039b8 <UART_SetConfig+0x338>
 8003988:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800398c:	d817      	bhi.n	80039be <UART_SetConfig+0x33e>
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003992:	d00b      	beq.n	80039ac <UART_SetConfig+0x32c>
 8003994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003998:	d811      	bhi.n	80039be <UART_SetConfig+0x33e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <UART_SetConfig+0x326>
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a2:	d006      	beq.n	80039b2 <UART_SetConfig+0x332>
 80039a4:	e00b      	b.n	80039be <UART_SetConfig+0x33e>
 80039a6:	2300      	movs	r3, #0
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e00d      	b.n	80039c8 <UART_SetConfig+0x348>
 80039ac:	2302      	movs	r3, #2
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e00a      	b.n	80039c8 <UART_SetConfig+0x348>
 80039b2:	2304      	movs	r3, #4
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e007      	b.n	80039c8 <UART_SetConfig+0x348>
 80039b8:	2308      	movs	r3, #8
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x348>
 80039be:	2310      	movs	r3, #16
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e001      	b.n	80039c8 <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d0:	d15b      	bne.n	8003a8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d828      	bhi.n	8003a2a <UART_SetConfig+0x3aa>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <UART_SetConfig+0x360>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fe9e 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61b8      	str	r0, [r7, #24]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7fe feae 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b4b      	ldr	r3, [pc, #300]	@ (8003b44 <UART_SetConfig+0x4c4>)
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe fdc1 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003a1e:	61b8      	str	r0, [r7, #24]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a26:	61bb      	str	r3, [r7, #24]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77bb      	strb	r3, [r7, #30]
        break;
 8003a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d074      	beq.n	8003b24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	d916      	bls.n	8003a84 <UART_SetConfig+0x404>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d212      	bcs.n	8003a84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f023 030f 	bic.w	r3, r3, #15
 8003a66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	89fa      	ldrh	r2, [r7, #14]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e04f      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	77bb      	strb	r3, [r7, #30]
 8003a88:	e04c      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d828      	bhi.n	8003ae2 <UART_SetConfig+0x462>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <UART_SetConfig+0x418>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fe42 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe fe52 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <UART_SetConfig+0x4c4>)
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7fe fd65 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003ad6:	61b8      	str	r0, [r7, #24]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aea:	bf00      	nop
    }

    if (pclk != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085a      	lsrs	r2, r3, #1
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d909      	bls.n	8003b20 <UART_SetConfig+0x4a0>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b12:	d205      	bcs.n	8003b20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e001      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40007c00 	.word	0x40007c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	00f42400 	.word	0x00f42400

08003b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c46:	d10a      	bne.n	8003c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b098      	sub	sp, #96	@ 0x60
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c9c:	f7fd f8a0 	bl	8000de0 <HAL_GetTick>
 8003ca0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d12e      	bne.n	8003d0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f88c 	bl	8003ddc <UART_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d021      	beq.n	8003d0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e062      	b.n	8003dd4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d149      	bne.n	8003db0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f856 	bl	8003ddc <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d03c      	beq.n	8003db0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	623b      	str	r3, [r7, #32]
   return(result);
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d88:	61fa      	str	r2, [r7, #28]
 8003d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	617b      	str	r3, [r7, #20]
   return(result);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e011      	b.n	8003dd4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3758      	adds	r7, #88	@ 0x58
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dec:	e04f      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d04b      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fc fff3 	bl	8000de0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e04e      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d037      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d034      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b40      	cmp	r3, #64	@ 0x40
 8003e28:	d031      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d110      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f838 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e029      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e68:	d111      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f81e 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e00f      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0a0      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b095      	sub	sp, #84	@ 0x54
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ede:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d118      	bne.n	8003f5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0310 	bic.w	r3, r3, #16
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	613b      	str	r3, [r7, #16]
   return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f72:	bf00      	nop
 8003f74:	3754      	adds	r7, #84	@ 0x54
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f90:	2b84      	cmp	r3, #132	@ 0x84
 8003f92:	d005      	beq.n	8003fa0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3303      	adds	r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fb2:	f000 fe9f 	bl	8004cf4 <vTaskStartScheduler>
  
  return osOK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b089      	sub	sp, #36	@ 0x24
 8003fc0:	af04      	add	r7, sp, #16
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <osThreadCreate+0x54>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01c      	beq.n	8004010 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685c      	ldr	r4, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691e      	ldr	r6, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ffc8 	bl	8003f7e <makeFreeRtosPriority>
 8003fee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ff8:	9202      	str	r2, [sp, #8]
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	9100      	str	r1, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	4632      	mov	r2, r6
 8004002:	4629      	mov	r1, r5
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fc85 	bl	8004914 <xTaskCreateStatic>
 800400a:	4603      	mov	r3, r0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e01c      	b.n	800404a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685c      	ldr	r4, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800401c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ffaa 	bl	8003f7e <makeFreeRtosPriority>
 800402a:	4602      	mov	r2, r0
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	9200      	str	r2, [sp, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4632      	mov	r2, r6
 8004038:	4629      	mov	r1, r5
 800403a:	4620      	mov	r0, r4
 800403c:	f000 fcd0 	bl	80049e0 <xTaskCreate>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d001      	beq.n	800404a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004054 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <osDelay+0x16>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	e000      	b.n	800406c <osDelay+0x18>
 800406a:	2301      	movs	r3, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fe09 	bl	8004c84 <vTaskDelay>
  
  return osOK;
 8004072:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4619      	mov	r1, r3
 8004092:	2001      	movs	r0, #1
 8004094:	f000 fa45 	bl	8004522 <xQueueCreateMutexStatic>
 8004098:	4603      	mov	r3, r0
 800409a:	e003      	b.n	80040a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800409c:	2001      	movs	r0, #1
 800409e:	f000 fa28 	bl	80044f2 <xQueueCreateMutex>
 80040a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0208 	add.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d103      	bne.n	800416e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e00c      	b.n	8004188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3308      	adds	r3, #8
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <vListInsert+0x2e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d2f6      	bcs.n	8004176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6892      	ldr	r2, [r2, #8]
 80041d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d103      	bne.n	80041f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	b672      	cpsid	i
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	b662      	cpsie	i
 800423c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004244:	f001 fbaa 	bl	800599c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	3b01      	subs	r3, #1
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	22ff      	movs	r2, #255	@ 0xff
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	@ 0xff
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d114      	bne.n	80042c4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01a      	beq.n	80042d8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3310      	adds	r3, #16
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ff8a 	bl	80051c0 <xTaskRemoveFromEventList>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d012      	beq.n	80042d8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <xQueueGenericReset+0xd4>)
 80042b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	e009      	b.n	80042d8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3310      	adds	r3, #16
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff feef 	bl	80040ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff feea 	bl	80040ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042d8:	f001 fb96 	bl	8005a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	@ 0x38
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	b672      	cpsid	i
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	b662      	cpsie	i
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <xQueueGenericCreateStatic+0x5e>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xQueueGenericCreateStatic+0x62>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericCreateStatic+0x64>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	623b      	str	r3, [r7, #32]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <xQueueGenericCreateStatic+0x90>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <xQueueGenericCreateStatic+0x94>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <xQueueGenericCreateStatic+0x96>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	b672      	cpsid	i
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	b662      	cpsie	i
 800439a:	61fb      	str	r3, [r7, #28]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043a2:	2348      	movs	r3, #72	@ 0x48
 80043a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b48      	cmp	r3, #72	@ 0x48
 80043aa:	d00d      	beq.n	80043c8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	b672      	cpsid	i
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	b662      	cpsie	i
 80043c0:	61bb      	str	r3, [r7, #24]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f848 	bl	8004480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	@ 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b08a      	sub	sp, #40	@ 0x28
 80043fe:	af02      	add	r7, sp, #8
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <xQueueGenericCreate+0x30>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004412:	b672      	cpsid	i
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	b662      	cpsie	i
 8004422:	613b      	str	r3, [r7, #16]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e004      	b.n	8004440 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3348      	adds	r3, #72	@ 0x48
 8004444:	4618      	mov	r0, r3
 8004446:	f001 fb91 	bl	8005b6c <pvPortMalloc>
 800444a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d011      	beq.n	8004476 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3348      	adds	r3, #72	@ 0x48
 800445a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004464:	79fa      	ldrb	r2, [r7, #7]
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f805 	bl	8004480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004476:	69bb      	ldr	r3, [r7, #24]
	}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e002      	b.n	80044a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044ae:	2101      	movs	r1, #1
 80044b0:	69b8      	ldr	r0, [r7, #24]
 80044b2:	f7ff feaf 	bl	8004214 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00e      	beq.n	80044ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044de:	2300      	movs	r3, #0
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f837 	bl	8004558 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	461a      	mov	r2, r3
 8004508:	6939      	ldr	r1, [r7, #16]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff75 	bl	80043fa <xQueueGenericCreate>
 8004510:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff ffd3 	bl	80044be <prvInitialiseMutex>

		return xNewQueue;
 8004518:	68fb      	ldr	r3, [r7, #12]
	}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af02      	add	r7, sp, #8
 8004528:	4603      	mov	r3, r0
 800452a:	6039      	str	r1, [r7, #0]
 800452c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	6939      	ldr	r1, [r7, #16]
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7ff fed3 	bl	80042ec <xQueueGenericCreateStatic>
 8004546:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ffb8 	bl	80044be <prvInitialiseMutex>

		return xNewQueue;
 800454e:	68fb      	ldr	r3, [r7, #12]
	}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	@ 0x38
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <xQueueGenericSend+0x38>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	b672      	cpsid	i
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	b662      	cpsie	i
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x46>
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x4a>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x4c>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d103      	bne.n	80045d2 <xQueueGenericSend+0x7a>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <xQueueGenericSend+0x7e>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueGenericSend+0x80>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	b672      	cpsid	i
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	b662      	cpsie	i
 80045f0:	623b      	str	r3, [r7, #32]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f8:	f000 ffb0 	bl	800555c <xTaskGetSchedulerState>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <xQueueGenericSend+0xb0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <xQueueGenericSend+0xb4>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <xQueueGenericSend+0xb6>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <xQueueGenericSend+0xd6>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	b672      	cpsid	i
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	b662      	cpsie	i
 8004626:	61fb      	str	r3, [r7, #28]
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	e7fd      	b.n	800462a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800462e:	f001 f9b5 	bl	800599c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xQueueGenericSend+0xec>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d129      	bne.n	8004698 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800464a:	f000 f88f 	bl	800476c <prvCopyDataToQueue>
 800464e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	3324      	adds	r3, #36	@ 0x24
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fdaf 	bl	80051c0 <xTaskRemoveFromEventList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004668:	4b3f      	ldr	r3, [pc, #252]	@ (8004768 <xQueueGenericSend+0x210>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	e00a      	b.n	8004690 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004680:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <xQueueGenericSend+0x210>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004690:	f001 f9ba 	bl	8005a08 <vPortExitCritical>
				return pdPASS;
 8004694:	2301      	movs	r3, #1
 8004696:	e063      	b.n	8004760 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800469e:	f001 f9b3 	bl	8005a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e05c      	b.n	8004760 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fdeb 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ba:	f001 f9a5 	bl	8005a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046be:	f000 fb87 	bl	8004dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046c2:	f001 f96b 	bl	800599c <vPortEnterCritical>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d103      	bne.n	80046dc <xQueueGenericSend+0x184>
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x19a>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f2:	f001 f989 	bl	8005a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046f6:	1d3a      	adds	r2, r7, #4
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fdda 	bl	80052b8 <xTaskCheckForTimeOut>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d124      	bne.n	8004754 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800470a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800470c:	f000 f8ea 	bl	80048e4 <prvIsQueueFull>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	3310      	adds	r3, #16
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fd26 	bl	8005170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004726:	f000 f88b 	bl	8004840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800472a:	f000 fb5f 	bl	8004dec <xTaskResumeAll>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f af7c 	bne.w	800462e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004736:	4b0c      	ldr	r3, [pc, #48]	@ (8004768 <xQueueGenericSend+0x210>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	e772      	b.n	800462e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800474a:	f000 f879 	bl	8004840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800474e:	f000 fb4d 	bl	8004dec <xTaskResumeAll>
 8004752:	e76c      	b.n	800462e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004756:	f000 f873 	bl	8004840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800475a:	f000 fb47 	bl	8004dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800475e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004760:	4618      	mov	r0, r3
 8004762:	3738      	adds	r7, #56	@ 0x38
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d14d      	bne.n	800482e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fefe 	bl	8005598 <xTaskPriorityDisinherit>
 800479c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	e043      	b.n	800482e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d119      	bne.n	80047e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6858      	ldr	r0, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	461a      	mov	r2, r3
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	f001 fc4e 	bl	8006058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d32b      	bcc.n	800482e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e026      	b.n	800482e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68d8      	ldr	r0, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	461a      	mov	r2, r3
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	f001 fc34 	bl	8006058 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	425b      	negs	r3, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d207      	bcs.n	800481c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	425b      	negs	r3, r3
 8004816:	441a      	add	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d105      	bne.n	800482e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3b01      	subs	r3, #1
 800482c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004848:	f001 f8a8 	bl	800599c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004854:	e011      	b.n	800487a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d012      	beq.n	8004884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3324      	adds	r3, #36	@ 0x24
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fcac 	bl	80051c0 <xTaskRemoveFromEventList>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800486e:	f000 fd8b 	bl	8005388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	3b01      	subs	r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800487a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dce9      	bgt.n	8004856 <prvUnlockQueue+0x16>
 8004882:	e000      	b.n	8004886 <prvUnlockQueue+0x46>
					break;
 8004884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	22ff      	movs	r2, #255	@ 0xff
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800488e:	f001 f8bb 	bl	8005a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004892:	f001 f883 	bl	800599c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800489c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800489e:	e011      	b.n	80048c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d012      	beq.n	80048ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3310      	adds	r3, #16
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fc87 	bl	80051c0 <xTaskRemoveFromEventList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048b8:	f000 fd66 	bl	8005388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	3b01      	subs	r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dce9      	bgt.n	80048a0 <prvUnlockQueue+0x60>
 80048cc:	e000      	b.n	80048d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	22ff      	movs	r2, #255	@ 0xff
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80048d8:	f001 f896 	bl	8005a08 <vPortExitCritical>
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048ec:	f001 f856 	bl	800599c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d102      	bne.n	8004902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e001      	b.n	8004906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004906:	f001 f87f 	bl	8005a08 <vPortExitCritical>

	return xReturn;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	@ 0x38
 8004918:	af04      	add	r7, sp, #16
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <xTaskCreateStatic+0x30>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	b672      	cpsid	i
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	b662      	cpsie	i
 800493c:	623b      	str	r3, [r7, #32]
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <xTaskCreateStatic+0x52>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	b672      	cpsid	i
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	b662      	cpsie	i
 800495e:	61fb      	str	r3, [r7, #28]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004966:	23a0      	movs	r3, #160	@ 0xa0
 8004968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2ba0      	cmp	r3, #160	@ 0xa0
 800496e:	d00d      	beq.n	800498c <xTaskCreateStatic+0x78>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	b672      	cpsid	i
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	b662      	cpsie	i
 8004984:	61bb      	str	r3, [r7, #24]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800498c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01e      	beq.n	80049d2 <xTaskCreateStatic+0xbe>
 8004994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01b      	beq.n	80049d2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049ac:	2300      	movs	r3, #0
 80049ae:	9303      	str	r3, [sp, #12]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f851 	bl	8004a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049cc:	f000 f8f0 	bl	8004bb0 <prvAddNewTaskToReadyList>
 80049d0:	e001      	b.n	80049d6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049d6:	697b      	ldr	r3, [r7, #20]
	}
 80049d8:	4618      	mov	r0, r3
 80049da:	3728      	adds	r7, #40	@ 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af04      	add	r7, sp, #16
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 f8b9 	bl	8005b6c <pvPortMalloc>
 80049fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a02:	20a0      	movs	r0, #160	@ 0xa0
 8004a04:	f001 f8b2 	bl	8005b6c <pvPortMalloc>
 8004a08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a16:	e005      	b.n	8004a24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f001 f975 	bl	8005d08 <vPortFree>
 8004a1e:	e001      	b.n	8004a24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d017      	beq.n	8004a5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	2300      	movs	r3, #0
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f80f 	bl	8004a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a4e:	69f8      	ldr	r0, [r7, #28]
 8004a50:	f000 f8ae 	bl	8004bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e002      	b.n	8004a60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a60:	69bb      	ldr	r3, [r7, #24]
	}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004a84:	440b      	add	r3, r1
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f023 0307 	bic.w	r3, r3, #7
 8004a92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <prvInitialiseNewTask+0x4e>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	b672      	cpsid	i
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	b662      	cpsie	i
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01f      	beq.n	8004b00 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	e012      	b.n	8004aec <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	7819      	ldrb	r1, [r3, #0]
 8004ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3334      	adds	r3, #52	@ 0x34
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	d9e9      	bls.n	8004ac6 <prvInitialiseNewTask+0x5a>
 8004af2:	e000      	b.n	8004af6 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004af4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004afe:	e003      	b.n	8004b08 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d901      	bls.n	8004b12 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b0e:	2306      	movs	r3, #6
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	2200      	movs	r2, #0
 8004b22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	3304      	adds	r3, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fadf 	bl	80040ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	3318      	adds	r3, #24
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fada 	bl	80040ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b40:	f1c3 0207 	rsb	r2, r3, #7
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	334c      	adds	r3, #76	@ 0x4c
 8004b62:	224c      	movs	r2, #76	@ 0x4c
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f9ea 	bl	8005f40 <memset>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba4 <prvInitialiseNewTask+0x138>)
 8004b70:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba8 <prvInitialiseNewTask+0x13c>)
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004bac <prvInitialiseNewTask+0x140>)
 8004b7c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68f9      	ldr	r1, [r7, #12]
 8004b82:	69b8      	ldr	r0, [r7, #24]
 8004b84:	f000 fdfa 	bl	800577c <pxPortInitialiseStack>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200043f8 	.word	0x200043f8
 8004ba8:	20004460 	.word	0x20004460
 8004bac:	200044c8 	.word	0x200044c8

08004bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bb8:	f000 fef0 	bl	800599c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a29      	ldr	r2, [pc, #164]	@ (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bc6:	4b29      	ldr	r3, [pc, #164]	@ (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bce:	4a27      	ldr	r2, [pc, #156]	@ (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bd4:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <prvAddNewTaskToReadyList+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d110      	bne.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bdc:	f000 fbf8 	bl	80053d0 <prvInitialiseTaskLists>
 8004be0:	e00d      	b.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004be2:	4b23      	ldr	r3, [pc, #140]	@ (8004c70 <prvAddNewTaskToReadyList+0xc0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d802      	bhi.n	8004bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <prvAddNewTaskToReadyList+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <prvAddNewTaskToReadyList+0xc4>)
 8004c06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <prvAddNewTaskToReadyList+0xc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <prvAddNewTaskToReadyList+0xc8>)
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4a15      	ldr	r2, [pc, #84]	@ (8004c7c <prvAddNewTaskToReadyList+0xcc>)
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f7ff fa68 	bl	8004106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c36:	f000 fee7 	bl	8005a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <prvAddNewTaskToReadyList+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00e      	beq.n	8004c60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c42:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <prvAddNewTaskToReadyList+0xbc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d207      	bcs.n	8004c60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <prvAddNewTaskToReadyList+0xd0>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200007ac 	.word	0x200007ac
 8004c6c:	200006ac 	.word	0x200006ac
 8004c70:	200007b8 	.word	0x200007b8
 8004c74:	200007c8 	.word	0x200007c8
 8004c78:	200007b4 	.word	0x200007b4
 8004c7c:	200006b0 	.word	0x200006b0
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01a      	beq.n	8004ccc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <vTaskDelay+0x68>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <vTaskDelay+0x36>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	b672      	cpsid	i
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	b662      	cpsie	i
 8004cb2:	60bb      	str	r3, [r7, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004cba:	f000 f889 	bl	8004dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fcf5 	bl	80056b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cc6:	f000 f891 	bl	8004dec <xTaskResumeAll>
 8004cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <vTaskDelay+0x6c>)
 8004cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200007d4 	.word	0x200007d4
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	@ 0x28
 8004cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d02:	463a      	mov	r2, r7
 8004d04:	1d39      	adds	r1, r7, #4
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc2e 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	9202      	str	r2, [sp, #8]
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	460a      	mov	r2, r1
 8004d22:	4923      	ldr	r1, [pc, #140]	@ (8004db0 <vTaskStartScheduler+0xbc>)
 8004d24:	4823      	ldr	r0, [pc, #140]	@ (8004db4 <vTaskStartScheduler+0xc0>)
 8004d26:	f7ff fdf5 	bl	8004914 <xTaskCreateStatic>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a22      	ldr	r2, [pc, #136]	@ (8004db8 <vTaskStartScheduler+0xc4>)
 8004d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d30:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <vTaskStartScheduler+0xc4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e001      	b.n	8004d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d11d      	bne.n	8004d84 <vTaskStartScheduler+0x90>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
 8004d5c:	613b      	str	r3, [r7, #16]
}
 8004d5e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d60:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <vTaskStartScheduler+0xc8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	334c      	adds	r3, #76	@ 0x4c
 8004d66:	4a16      	ldr	r2, [pc, #88]	@ (8004dc0 <vTaskStartScheduler+0xcc>)
 8004d68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d6a:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <vTaskStartScheduler+0xd0>)
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d72:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <vTaskStartScheduler+0xd4>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <vTaskStartScheduler+0xd8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d7e:	f000 fd8f 	bl	80058a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d82:	e011      	b.n	8004da8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d10d      	bne.n	8004da8 <vTaskStartScheduler+0xb4>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	b672      	cpsid	i
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	b662      	cpsie	i
 8004da0:	60fb      	str	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <vTaskStartScheduler+0xb0>
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	080061a8 	.word	0x080061a8
 8004db4:	080053a1 	.word	0x080053a1
 8004db8:	200007d0 	.word	0x200007d0
 8004dbc:	200006ac 	.word	0x200006ac
 8004dc0:	20000010 	.word	0x20000010
 8004dc4:	200007cc 	.word	0x200007cc
 8004dc8:	200007b8 	.word	0x200007b8
 8004dcc:	200007b0 	.word	0x200007b0

08004dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004dd4:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <vTaskSuspendAll+0x18>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a03      	ldr	r2, [pc, #12]	@ (8004de8 <vTaskSuspendAll+0x18>)
 8004ddc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	200007d4 	.word	0x200007d4

08004dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dfa:	4b43      	ldr	r3, [pc, #268]	@ (8004f08 <xTaskResumeAll+0x11c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <xTaskResumeAll+0x32>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	b672      	cpsid	i
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	b662      	cpsie	i
 8004e16:	603b      	str	r3, [r7, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e1e:	f000 fdbd 	bl	800599c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e22:	4b39      	ldr	r3, [pc, #228]	@ (8004f08 <xTaskResumeAll+0x11c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4a37      	ldr	r2, [pc, #220]	@ (8004f08 <xTaskResumeAll+0x11c>)
 8004e2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e2c:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <xTaskResumeAll+0x11c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d161      	bne.n	8004ef8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e34:	4b35      	ldr	r3, [pc, #212]	@ (8004f0c <xTaskResumeAll+0x120>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05d      	beq.n	8004ef8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e3c:	e02e      	b.n	8004e9c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3e:	4b34      	ldr	r3, [pc, #208]	@ (8004f10 <xTaskResumeAll+0x124>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f9b8 	bl	80041c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff f9b3 	bl	80041c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	2201      	movs	r2, #1
 8004e60:	409a      	lsls	r2, r3
 8004e62:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <xTaskResumeAll+0x128>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <xTaskResumeAll+0x128>)
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4a27      	ldr	r2, [pc, #156]	@ (8004f18 <xTaskResumeAll+0x12c>)
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7ff f93f 	bl	8004106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8c:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <xTaskResumeAll+0x130>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004e96:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <xTaskResumeAll+0x134>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <xTaskResumeAll+0x124>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1cc      	bne.n	8004e3e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004eaa:	f000 fb37 	bl	800551c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004eae:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <xTaskResumeAll+0x138>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004eba:	f000 f837 	bl	8004f2c <xTaskIncrementTick>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004ec4:	4b16      	ldr	r3, [pc, #88]	@ (8004f20 <xTaskResumeAll+0x134>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f1      	bne.n	8004eba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	@ (8004f24 <xTaskResumeAll+0x138>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <xTaskResumeAll+0x134>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f28 <xTaskResumeAll+0x13c>)
 8004eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef8:	f000 fd86 	bl	8005a08 <vPortExitCritical>

	return xAlreadyYielded;
 8004efc:	68bb      	ldr	r3, [r7, #8]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200007d4 	.word	0x200007d4
 8004f0c:	200007ac 	.word	0x200007ac
 8004f10:	2000076c 	.word	0x2000076c
 8004f14:	200007b4 	.word	0x200007b4
 8004f18:	200006b0 	.word	0x200006b0
 8004f1c:	200006ac 	.word	0x200006ac
 8004f20:	200007c0 	.word	0x200007c0
 8004f24:	200007bc 	.word	0x200007bc
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f36:	4b50      	ldr	r3, [pc, #320]	@ (8005078 <xTaskIncrementTick+0x14c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 808b 	bne.w	8005056 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f40:	4b4e      	ldr	r3, [pc, #312]	@ (800507c <xTaskIncrementTick+0x150>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f48:	4a4c      	ldr	r2, [pc, #304]	@ (800507c <xTaskIncrementTick+0x150>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d123      	bne.n	8004f9c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f54:	4b4a      	ldr	r3, [pc, #296]	@ (8005080 <xTaskIncrementTick+0x154>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <xTaskIncrementTick+0x4e>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f62:	b672      	cpsid	i
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	b662      	cpsie	i
 8004f72:	603b      	str	r3, [r7, #0]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xTaskIncrementTick+0x4a>
 8004f7a:	4b41      	ldr	r3, [pc, #260]	@ (8005080 <xTaskIncrementTick+0x154>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	4b40      	ldr	r3, [pc, #256]	@ (8005084 <xTaskIncrementTick+0x158>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a3e      	ldr	r2, [pc, #248]	@ (8005080 <xTaskIncrementTick+0x154>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	4a3e      	ldr	r2, [pc, #248]	@ (8005084 <xTaskIncrementTick+0x158>)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005088 <xTaskIncrementTick+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a3c      	ldr	r2, [pc, #240]	@ (8005088 <xTaskIncrementTick+0x15c>)
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	f000 fac0 	bl	800551c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800508c <xTaskIncrementTick+0x160>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d348      	bcc.n	8005038 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa6:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <xTaskIncrementTick+0x154>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb0:	4b36      	ldr	r3, [pc, #216]	@ (800508c <xTaskIncrementTick+0x160>)
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	601a      	str	r2, [r3, #0]
					break;
 8004fb8:	e03e      	b.n	8005038 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fba:	4b31      	ldr	r3, [pc, #196]	@ (8005080 <xTaskIncrementTick+0x154>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d203      	bcs.n	8004fda <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800508c <xTaskIncrementTick+0x160>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fd8:	e02e      	b.n	8005038 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff f8ee 	bl	80041c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff f8e5 	bl	80041c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <xTaskIncrementTick+0x164>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	4a22      	ldr	r2, [pc, #136]	@ (8005090 <xTaskIncrementTick+0x164>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <xTaskIncrementTick+0x168>)
 8005016:	441a      	add	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7ff f871 	bl	8004106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <xTaskIncrementTick+0x16c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	429a      	cmp	r2, r3
 8005030:	d3b9      	bcc.n	8004fa6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005032:	2301      	movs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005036:	e7b6      	b.n	8004fa6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005038:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <xTaskIncrementTick+0x16c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503e:	4915      	ldr	r1, [pc, #84]	@ (8005094 <xTaskIncrementTick+0x168>)
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d907      	bls.n	8005060 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e004      	b.n	8005060 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005056:	4b11      	ldr	r3, [pc, #68]	@ (800509c <xTaskIncrementTick+0x170>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	4a0f      	ldr	r2, [pc, #60]	@ (800509c <xTaskIncrementTick+0x170>)
 800505e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005060:	4b0f      	ldr	r3, [pc, #60]	@ (80050a0 <xTaskIncrementTick+0x174>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800506c:	697b      	ldr	r3, [r7, #20]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	200007d4 	.word	0x200007d4
 800507c:	200007b0 	.word	0x200007b0
 8005080:	20000764 	.word	0x20000764
 8005084:	20000768 	.word	0x20000768
 8005088:	200007c4 	.word	0x200007c4
 800508c:	200007cc 	.word	0x200007cc
 8005090:	200007b4 	.word	0x200007b4
 8005094:	200006b0 	.word	0x200006b0
 8005098:	200006ac 	.word	0x200006ac
 800509c:	200007bc 	.word	0x200007bc
 80050a0:	200007c0 	.word	0x200007c0

080050a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <vTaskSwitchContext+0xb4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050b2:	4b2a      	ldr	r3, [pc, #168]	@ (800515c <vTaskSwitchContext+0xb8>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050b8:	e047      	b.n	800514a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80050ba:	4b28      	ldr	r3, [pc, #160]	@ (800515c <vTaskSwitchContext+0xb8>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c0:	4b27      	ldr	r3, [pc, #156]	@ (8005160 <vTaskSwitchContext+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	f1c3 031f 	rsb	r3, r3, #31
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	4923      	ldr	r1, [pc, #140]	@ (8005164 <vTaskSwitchContext+0xc0>)
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <vTaskSwitchContext+0x62>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	b672      	cpsid	i
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	b662      	cpsie	i
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vTaskSwitchContext+0x5e>
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4a14      	ldr	r2, [pc, #80]	@ (8005164 <vTaskSwitchContext+0xc0>)
 8005112:	4413      	add	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3308      	adds	r3, #8
 8005128:	429a      	cmp	r2, r3
 800512a:	d104      	bne.n	8005136 <vTaskSwitchContext+0x92>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a0a      	ldr	r2, [pc, #40]	@ (8005168 <vTaskSwitchContext+0xc4>)
 800513e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <vTaskSwitchContext+0xc4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	334c      	adds	r3, #76	@ 0x4c
 8005146:	4a09      	ldr	r2, [pc, #36]	@ (800516c <vTaskSwitchContext+0xc8>)
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	200007d4 	.word	0x200007d4
 800515c:	200007c0 	.word	0x200007c0
 8005160:	200007b4 	.word	0x200007b4
 8005164:	200006b0 	.word	0x200006b0
 8005168:	200006ac 	.word	0x200006ac
 800516c:	20000010 	.word	0x20000010

08005170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	b672      	cpsid	i
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	b662      	cpsie	i
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vTaskPlaceOnEventList+0x4c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3318      	adds	r3, #24
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fe ffd2 	bl	800414e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051aa:	2101      	movs	r1, #1
 80051ac:	6838      	ldr	r0, [r7, #0]
 80051ae:	f000 fa7f 	bl	80056b0 <prvAddCurrentTaskToDelayedList>
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	200006ac 	.word	0x200006ac

080051c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	b672      	cpsid	i
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	b662      	cpsie	i
 80051ea:	60fb      	str	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3318      	adds	r3, #24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe ffe2 	bl	80041c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <xTaskRemoveFromEventList+0xb4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11c      	bne.n	800523e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe ffd9 	bl	80041c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	2201      	movs	r2, #1
 8005214:	409a      	lsls	r2, r3
 8005216:	4b18      	ldr	r3, [pc, #96]	@ (8005278 <xTaskRemoveFromEventList+0xb8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <xTaskRemoveFromEventList+0xb8>)
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4a13      	ldr	r2, [pc, #76]	@ (800527c <xTaskRemoveFromEventList+0xbc>)
 800522e:	441a      	add	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f7fe ff65 	bl	8004106 <vListInsertEnd>
 800523c:	e005      	b.n	800524a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3318      	adds	r3, #24
 8005242:	4619      	mov	r1, r3
 8005244:	480e      	ldr	r0, [pc, #56]	@ (8005280 <xTaskRemoveFromEventList+0xc0>)
 8005246:	f7fe ff5e 	bl	8004106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <xTaskRemoveFromEventList+0xc4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	429a      	cmp	r2, r3
 8005256:	d905      	bls.n	8005264 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <xTaskRemoveFromEventList+0xc8>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e001      	b.n	8005268 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005268:	697b      	ldr	r3, [r7, #20]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200007d4 	.word	0x200007d4
 8005278:	200007b4 	.word	0x200007b4
 800527c:	200006b0 	.word	0x200006b0
 8005280:	2000076c 	.word	0x2000076c
 8005284:	200006ac 	.word	0x200006ac
 8005288:	200007c0 	.word	0x200007c0

0800528c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <vTaskInternalSetTimeOutState+0x24>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <vTaskInternalSetTimeOutState+0x28>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	200007c4 	.word	0x200007c4
 80052b4:	200007b0 	.word	0x200007b0

080052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	b672      	cpsid	i
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	b662      	cpsie	i
 80052dc:	613b      	str	r3, [r7, #16]
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	b672      	cpsid	i
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	b662      	cpsie	i
 80052fe:	60fb      	str	r3, [r7, #12]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005306:	f000 fb49 	bl	800599c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <xTaskCheckForTimeOut+0xc8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d102      	bne.n	800532a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e023      	b.n	8005372 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <xTaskCheckForTimeOut+0xcc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d007      	beq.n	8005346 <xTaskCheckForTimeOut+0x8e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e015      	b.n	8005372 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	d20b      	bcs.n	8005368 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ff95 	bl	800528c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e004      	b.n	8005372 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800536e:	2301      	movs	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005372:	f000 fb49 	bl	8005a08 <vPortExitCritical>

	return xReturn;
 8005376:	69fb      	ldr	r3, [r7, #28]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	200007b0 	.word	0x200007b0
 8005384:	200007c4 	.word	0x200007c4

08005388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800538c:	4b03      	ldr	r3, [pc, #12]	@ (800539c <vTaskMissedYield+0x14>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	200007c0 	.word	0x200007c0

080053a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053a8:	f000 f852 	bl	8005450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053ac:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <prvIdleTask+0x28>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d9f9      	bls.n	80053a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <prvIdleTask+0x2c>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053c4:	e7f0      	b.n	80053a8 <prvIdleTask+0x8>
 80053c6:	bf00      	nop
 80053c8:	200006b0 	.word	0x200006b0
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	e00c      	b.n	80053f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a12      	ldr	r2, [pc, #72]	@ (8005430 <prvInitialiseTaskLists+0x60>)
 80053e8:	4413      	add	r3, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fe5e 	bl	80040ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3301      	adds	r3, #1
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d9ef      	bls.n	80053dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053fc:	480d      	ldr	r0, [pc, #52]	@ (8005434 <prvInitialiseTaskLists+0x64>)
 80053fe:	f7fe fe55 	bl	80040ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005402:	480d      	ldr	r0, [pc, #52]	@ (8005438 <prvInitialiseTaskLists+0x68>)
 8005404:	f7fe fe52 	bl	80040ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005408:	480c      	ldr	r0, [pc, #48]	@ (800543c <prvInitialiseTaskLists+0x6c>)
 800540a:	f7fe fe4f 	bl	80040ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800540e:	480c      	ldr	r0, [pc, #48]	@ (8005440 <prvInitialiseTaskLists+0x70>)
 8005410:	f7fe fe4c 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005414:	480b      	ldr	r0, [pc, #44]	@ (8005444 <prvInitialiseTaskLists+0x74>)
 8005416:	f7fe fe49 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <prvInitialiseTaskLists+0x78>)
 800541c:	4a05      	ldr	r2, [pc, #20]	@ (8005434 <prvInitialiseTaskLists+0x64>)
 800541e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005420:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <prvInitialiseTaskLists+0x7c>)
 8005422:	4a05      	ldr	r2, [pc, #20]	@ (8005438 <prvInitialiseTaskLists+0x68>)
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200006b0 	.word	0x200006b0
 8005434:	2000073c 	.word	0x2000073c
 8005438:	20000750 	.word	0x20000750
 800543c:	2000076c 	.word	0x2000076c
 8005440:	20000780 	.word	0x20000780
 8005444:	20000798 	.word	0x20000798
 8005448:	20000764 	.word	0x20000764
 800544c:	20000768 	.word	0x20000768

08005450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005456:	e019      	b.n	800548c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005458:	f000 faa0 	bl	800599c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545c:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <prvCheckTasksWaitingTermination+0x50>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fea9 	bl	80041c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <prvCheckTasksWaitingTermination+0x54>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	4a0b      	ldr	r2, [pc, #44]	@ (80054a4 <prvCheckTasksWaitingTermination+0x54>)
 8005476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <prvCheckTasksWaitingTermination+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3b01      	subs	r3, #1
 800547e:	4a0a      	ldr	r2, [pc, #40]	@ (80054a8 <prvCheckTasksWaitingTermination+0x58>)
 8005480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005482:	f000 fac1 	bl	8005a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f810 	bl	80054ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <prvCheckTasksWaitingTermination+0x58>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e1      	bne.n	8005458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000780 	.word	0x20000780
 80054a4:	200007ac 	.word	0x200007ac
 80054a8:	20000794 	.word	0x20000794

080054ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	334c      	adds	r3, #76	@ 0x4c
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fd49 	bl	8005f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fc1b 	bl	8005d08 <vPortFree>
				vPortFree( pxTCB );
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fc18 	bl	8005d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054d8:	e01b      	b.n	8005512 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d103      	bne.n	80054ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc0f 	bl	8005d08 <vPortFree>
	}
 80054ea:	e012      	b.n	8005512 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d00d      	beq.n	8005512 <prvDeleteTCB+0x66>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	b672      	cpsid	i
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	b662      	cpsie	i
 800550a:	60fb      	str	r3, [r7, #12]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <prvDeleteTCB+0x62>
	}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005522:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <prvResetNextTaskUnblockTime+0x38>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <prvResetNextTaskUnblockTime+0x3c>)
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005534:	e008      	b.n	8005548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <prvResetNextTaskUnblockTime+0x38>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a04      	ldr	r2, [pc, #16]	@ (8005558 <prvResetNextTaskUnblockTime+0x3c>)
 8005546:	6013      	str	r3, [r2, #0]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	20000764 	.word	0x20000764
 8005558:	200007cc 	.word	0x200007cc

0800555c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005562:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <xTaskGetSchedulerState+0x34>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800556a:	2301      	movs	r3, #1
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	e008      	b.n	8005582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005570:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <xTaskGetSchedulerState+0x38>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005578:	2302      	movs	r3, #2
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	e001      	b.n	8005582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005582:	687b      	ldr	r3, [r7, #4]
	}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	200007b8 	.word	0x200007b8
 8005594:	200007d4 	.word	0x200007d4

08005598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d074      	beq.n	8005698 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055ae:	4b3d      	ldr	r3, [pc, #244]	@ (80056a4 <xTaskPriorityDisinherit+0x10c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d00d      	beq.n	80055d4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	b672      	cpsid	i
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	b662      	cpsie	i
 80055cc:	60fb      	str	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	60bb      	str	r3, [r7, #8]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	429a      	cmp	r2, r3
 800560c:	d044      	beq.n	8005698 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005612:	2b00      	cmp	r3, #0
 8005614:	d140      	bne.n	8005698 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fdd0 	bl	80041c0 <uxListRemove>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d115      	bne.n	8005652 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562a:	491f      	ldr	r1, [pc, #124]	@ (80056a8 <xTaskPriorityDisinherit+0x110>)
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xTaskPriorityDisinherit+0xba>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	2201      	movs	r2, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43da      	mvns	r2, r3
 8005648:	4b18      	ldr	r3, [pc, #96]	@ (80056ac <xTaskPriorityDisinherit+0x114>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4013      	ands	r3, r2
 800564e:	4a17      	ldr	r2, [pc, #92]	@ (80056ac <xTaskPriorityDisinherit+0x114>)
 8005650:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565e:	f1c3 0207 	rsb	r2, r3, #7
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	2201      	movs	r2, #1
 800566c:	409a      	lsls	r2, r3
 800566e:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <xTaskPriorityDisinherit+0x114>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	4a0d      	ldr	r2, [pc, #52]	@ (80056ac <xTaskPriorityDisinherit+0x114>)
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4a08      	ldr	r2, [pc, #32]	@ (80056a8 <xTaskPriorityDisinherit+0x110>)
 8005686:	441a      	add	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f7fe fd39 	bl	8004106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005698:	697b      	ldr	r3, [r7, #20]
	}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200006ac 	.word	0x200006ac
 80056a8:	200006b0 	.word	0x200006b0
 80056ac:	200007b4 	.word	0x200007b4

080056b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ba:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fd7a 	bl	80041c0 <uxListRemove>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056d2:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	2201      	movs	r2, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43da      	mvns	r2, r3
 80056e0:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4013      	ands	r3, r2
 80056e6:	4a20      	ldr	r2, [pc, #128]	@ (8005768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d10a      	bne.n	8005708 <prvAddCurrentTaskToDelayedList+0x58>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	481a      	ldr	r0, [pc, #104]	@ (800576c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005702:	f7fe fd00 	bl	8004106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005706:	e026      	b.n	8005756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005710:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d209      	bcs.n	8005734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005720:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7fe fd0e 	bl	800414e <vListInsert>
}
 8005732:	e010      	b.n	8005756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe fd04 	bl	800414e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005746:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	d202      	bcs.n	8005756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005750:	4a09      	ldr	r2, [pc, #36]	@ (8005778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200007b0 	.word	0x200007b0
 8005764:	200006ac 	.word	0x200006ac
 8005768:	200007b4 	.word	0x200007b4
 800576c:	20000798 	.word	0x20000798
 8005770:	20000768 	.word	0x20000768
 8005774:	20000764 	.word	0x20000764
 8005778:	200007cc 	.word	0x200007cc

0800577c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b04      	subs	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b04      	subs	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057ac:	4a0c      	ldr	r2, [pc, #48]	@ (80057e0 <pxPortInitialiseStack+0x64>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b14      	subs	r3, #20
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f06f 0202 	mvn.w	r2, #2
 80057ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3b20      	subs	r3, #32
 80057d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	080057e5 	.word	0x080057e5

080057e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <prvTaskExitError+0x60>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d00d      	beq.n	8005814 <prvTaskExitError+0x30>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	b672      	cpsid	i
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	b662      	cpsie	i
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <prvTaskExitError+0x2c>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	b672      	cpsid	i
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	b662      	cpsie	i
 8005828:	60bb      	str	r3, [r7, #8]
}
 800582a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800582c:	bf00      	nop
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0fc      	beq.n	800582e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c
	...

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	4770      	bx	lr
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst2>:
 8005870:	200006ac 	.word	0x200006ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005878:	4808      	ldr	r0, [pc, #32]	@ (800589c <prvPortStartFirstTask+0x24>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8814 	msr	CONTROL, r0
 800588a:	b662      	cpsie	i
 800588c:	b661      	cpsie	f
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	df00      	svc	0
 8005898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800589a:	bf00      	nop
 800589c:	e000ed08 	.word	0xe000ed08

080058a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058a6:	4b37      	ldr	r3, [pc, #220]	@ (8005984 <xPortStartScheduler+0xe4>)
 80058a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	22ff      	movs	r2, #255	@ 0xff
 80058b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005988 <xPortStartScheduler+0xe8>)
 80058cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ce:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <xPortStartScheduler+0xec>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d4:	e009      	b.n	80058ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80058d6:	4b2d      	ldr	r3, [pc, #180]	@ (800598c <xPortStartScheduler+0xec>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a2b      	ldr	r2, [pc, #172]	@ (800598c <xPortStartScheduler+0xec>)
 80058de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d0ef      	beq.n	80058d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058f6:	4b25      	ldr	r3, [pc, #148]	@ (800598c <xPortStartScheduler+0xec>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d00d      	beq.n	800591e <xPortStartScheduler+0x7e>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	b672      	cpsid	i
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	b662      	cpsie	i
 8005916:	60bb      	str	r3, [r7, #8]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800591e:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <xPortStartScheduler+0xec>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	4a19      	ldr	r2, [pc, #100]	@ (800598c <xPortStartScheduler+0xec>)
 8005926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <xPortStartScheduler+0xec>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005930:	4a16      	ldr	r2, [pc, #88]	@ (800598c <xPortStartScheduler+0xec>)
 8005932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <xPortStartScheduler+0xf0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <xPortStartScheduler+0xf0>)
 8005942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <xPortStartScheduler+0xf0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a10      	ldr	r2, [pc, #64]	@ (8005990 <xPortStartScheduler+0xf0>)
 800594e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005954:	f000 f8dc 	bl	8005b10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005958:	4b0e      	ldr	r3, [pc, #56]	@ (8005994 <xPortStartScheduler+0xf4>)
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800595e:	f000 f8fb 	bl	8005b58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <xPortStartScheduler+0xf8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a0c      	ldr	r2, [pc, #48]	@ (8005998 <xPortStartScheduler+0xf8>)
 8005968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800596c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800596e:	f7ff ff83 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005972:	f7ff fb97 	bl	80050a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005976:	f7ff ff35 	bl	80057e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000e400 	.word	0xe000e400
 8005988:	200007d8 	.word	0x200007d8
 800598c:	200007dc 	.word	0x200007dc
 8005990:	e000ed20 	.word	0xe000ed20
 8005994:	2000000c 	.word	0x2000000c
 8005998:	e000ef34 	.word	0xe000ef34

0800599c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	b672      	cpsid	i
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	b662      	cpsie	i
 80059b6:	607b      	str	r3, [r7, #4]
}
 80059b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059ba:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <vPortEnterCritical+0x64>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a00 <vPortEnterCritical+0x64>)
 80059c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <vPortEnterCritical+0x64>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d112      	bne.n	80059f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <vPortEnterCritical+0x68>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <vPortEnterCritical+0x56>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	b672      	cpsid	i
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	b662      	cpsie	i
 80059ea:	603b      	str	r3, [r7, #0]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <vPortEnterCritical+0x52>
	}
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a0e:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <vPortExitCritical+0x54>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <vPortExitCritical+0x2a>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	b672      	cpsid	i
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	b662      	cpsie	i
 8005a2a:	607b      	str	r3, [r7, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005a32:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <vPortExitCritical+0x54>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	4a08      	ldr	r2, [pc, #32]	@ (8005a5c <vPortExitCritical+0x54>)
 8005a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a3c:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <vPortExitCritical+0x54>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <vPortExitCritical+0x48>
 8005a44:	2300      	movs	r3, #0
 8005a46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <pxCurrentTCBConst>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f01e 0f10 	tst.w	lr, #16
 8005a70:	bf08      	it	eq
 8005a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6010      	str	r0, [r2, #0]
 8005a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a84:	b672      	cpsid	i
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	b662      	cpsie	i
 8005a94:	f7ff fb06 	bl	80050a4 <vTaskSwitchContext>
 8005a98:	f04f 0000 	mov.w	r0, #0
 8005a9c:	f380 8811 	msr	BASEPRI, r0
 8005aa0:	bc09      	pop	{r0, r3}
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	6808      	ldr	r0, [r1, #0]
 8005aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	f01e 0f10 	tst.w	lr, #16
 8005aae:	bf08      	it	eq
 8005ab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ab4:	f380 8809 	msr	PSP, r0
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop

08005ac0 <pxCurrentTCBConst>:
 8005ac0:	200006ac 	.word	0x200006ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	b672      	cpsid	i
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	b662      	cpsie	i
 8005ae2:	607b      	str	r3, [r7, #4]
}
 8005ae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ae6:	f7ff fa21 	bl	8004f2c <xTaskIncrementTick>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <SysTick_Handler+0x44>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f383 8811 	msr	BASEPRI, r3
}
 8005b02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b14:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <vPortSetupTimerInterrupt+0x34>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <vPortSetupTimerInterrupt+0x38>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <vPortSetupTimerInterrupt+0x3c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a0a      	ldr	r2, [pc, #40]	@ (8005b50 <vPortSetupTimerInterrupt+0x40>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	4a09      	ldr	r2, [pc, #36]	@ (8005b54 <vPortSetupTimerInterrupt+0x44>)
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b32:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <vPortSetupTimerInterrupt+0x34>)
 8005b34:	2207      	movs	r2, #7
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000e010 	.word	0xe000e010
 8005b48:	e000e018 	.word	0xe000e018
 8005b4c:	20000000 	.word	0x20000000
 8005b50:	10624dd3 	.word	0x10624dd3
 8005b54:	e000e014 	.word	0xe000e014

08005b58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b68 <vPortEnableVFP+0x10>
 8005b5c:	6801      	ldr	r1, [r0, #0]
 8005b5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b62:	6001      	str	r1, [r0, #0]
 8005b64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b66:	bf00      	nop
 8005b68:	e000ed88 	.word	0xe000ed88

08005b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	@ 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b78:	f7ff f92a 	bl	8004dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8005cf4 <pvPortMalloc+0x188>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b84:	f000 f920 	bl	8005dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b88:	4b5b      	ldr	r3, [pc, #364]	@ (8005cf8 <pvPortMalloc+0x18c>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8094 	bne.w	8005cbe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d017      	beq.n	8005bde <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f023 0307 	bic.w	r3, r3, #7
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <pvPortMalloc+0x72>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	b672      	cpsid	i
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	b662      	cpsie	i
 8005bd6:	617b      	str	r3, [r7, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d06c      	beq.n	8005cbe <pvPortMalloc+0x152>
 8005be4:	4b45      	ldr	r3, [pc, #276]	@ (8005cfc <pvPortMalloc+0x190>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d867      	bhi.n	8005cbe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bee:	4b44      	ldr	r3, [pc, #272]	@ (8005d00 <pvPortMalloc+0x194>)
 8005bf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf2:	4b43      	ldr	r3, [pc, #268]	@ (8005d00 <pvPortMalloc+0x194>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bf8:	e004      	b.n	8005c04 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d903      	bls.n	8005c16 <pvPortMalloc+0xaa>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f1      	bne.n	8005bfa <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c16:	4b37      	ldr	r3, [pc, #220]	@ (8005cf4 <pvPortMalloc+0x188>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d04e      	beq.n	8005cbe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	4413      	add	r3, r2
 8005c28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d922      	bls.n	8005c88 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <pvPortMalloc+0x104>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	b672      	cpsid	i
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	b662      	cpsie	i
 8005c68:	613b      	str	r3, [r7, #16]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c82:	69b8      	ldr	r0, [r7, #24]
 8005c84:	f000 f902 	bl	8005e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c88:	4b1c      	ldr	r3, [pc, #112]	@ (8005cfc <pvPortMalloc+0x190>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a1a      	ldr	r2, [pc, #104]	@ (8005cfc <pvPortMalloc+0x190>)
 8005c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <pvPortMalloc+0x190>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <pvPortMalloc+0x198>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d203      	bcs.n	8005caa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca2:	4b16      	ldr	r3, [pc, #88]	@ (8005cfc <pvPortMalloc+0x190>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	@ (8005d04 <pvPortMalloc+0x198>)
 8005ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <pvPortMalloc+0x18c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cbe:	f7ff f895 	bl	8004dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <pvPortMalloc+0x17c>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	b672      	cpsid	i
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	b662      	cpsie	i
 8005ce0:	60fb      	str	r3, [r7, #12]
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <pvPortMalloc+0x178>
	return pvReturn;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3728      	adds	r7, #40	@ 0x28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200043e8 	.word	0x200043e8
 8005cf8:	200043f4 	.word	0x200043f4
 8005cfc:	200043ec 	.word	0x200043ec
 8005d00:	200043e0 	.word	0x200043e0
 8005d04:	200043f0 	.word	0x200043f0

08005d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d04e      	beq.n	8005db8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	425b      	negs	r3, r3
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <vPortFree+0xb8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <vPortFree+0x4a>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	60fb      	str	r3, [r7, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <vPortFree+0x6e>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	b672      	cpsid	i
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	b662      	cpsie	i
 8005d6e:	60bb      	str	r3, [r7, #8]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	4b11      	ldr	r3, [pc, #68]	@ (8005dc0 <vPortFree+0xb8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d019      	beq.n	8005db8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d115      	bne.n	8005db8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <vPortFree+0xb8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d9c:	f7ff f818 	bl	8004dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <vPortFree+0xbc>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	4a06      	ldr	r2, [pc, #24]	@ (8005dc4 <vPortFree+0xbc>)
 8005dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dae:	6938      	ldr	r0, [r7, #16]
 8005db0:	f000 f86c 	bl	8005e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005db4:	f7ff f81a 	bl	8004dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200043f4 	.word	0x200043f4
 8005dc4:	200043ec 	.word	0x200043ec

08005dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dd4:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <prvHeapInit+0xac>)
 8005dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3307      	adds	r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e74 <prvHeapInit+0xac>)
 8005df8:	4413      	add	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <prvHeapInit+0xb0>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e06:	4b1c      	ldr	r3, [pc, #112]	@ (8005e78 <prvHeapInit+0xb0>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e14:	2208      	movs	r2, #8
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a15      	ldr	r2, [pc, #84]	@ (8005e7c <prvHeapInit+0xb4>)
 8005e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e2a:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <prvHeapInit+0xb4>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e32:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <prvHeapInit+0xb4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e48:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <prvHeapInit+0xb4>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4a0a      	ldr	r2, [pc, #40]	@ (8005e80 <prvHeapInit+0xb8>)
 8005e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a09      	ldr	r2, [pc, #36]	@ (8005e84 <prvHeapInit+0xbc>)
 8005e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <prvHeapInit+0xc0>)
 8005e62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e66:	601a      	str	r2, [r3, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	200007e0 	.word	0x200007e0
 8005e78:	200043e0 	.word	0x200043e0
 8005e7c:	200043e8 	.word	0x200043e8
 8005e80:	200043f0 	.word	0x200043f0
 8005e84:	200043ec 	.word	0x200043ec
 8005e88:	200043f4 	.word	0x200043f4

08005e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e94:	4b28      	ldr	r3, [pc, #160]	@ (8005f38 <prvInsertBlockIntoFreeList+0xac>)
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e002      	b.n	8005ea0 <prvInsertBlockIntoFreeList+0x14>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d8f7      	bhi.n	8005e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d108      	bne.n	8005ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	441a      	add	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d118      	bne.n	8005f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b15      	ldr	r3, [pc, #84]	@ (8005f3c <prvInsertBlockIntoFreeList+0xb0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d00d      	beq.n	8005f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	441a      	add	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e008      	b.n	8005f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <prvInsertBlockIntoFreeList+0xb0>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e003      	b.n	8005f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d002      	beq.n	8005f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	200043e0 	.word	0x200043e0
 8005f3c:	200043e8 	.word	0x200043e8

08005f40 <memset>:
 8005f40:	4402      	add	r2, r0
 8005f42:	4603      	mov	r3, r0
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d100      	bne.n	8005f4a <memset+0xa>
 8005f48:	4770      	bx	lr
 8005f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4e:	e7f9      	b.n	8005f44 <memset+0x4>

08005f50 <_reclaim_reent>:
 8005f50:	4b2d      	ldr	r3, [pc, #180]	@ (8006008 <_reclaim_reent+0xb8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4283      	cmp	r3, r0
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	d053      	beq.n	8006004 <_reclaim_reent+0xb4>
 8005f5c:	69c3      	ldr	r3, [r0, #28]
 8005f5e:	b31b      	cbz	r3, 8005fa8 <_reclaim_reent+0x58>
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	b163      	cbz	r3, 8005f7e <_reclaim_reent+0x2e>
 8005f64:	2500      	movs	r5, #0
 8005f66:	69e3      	ldr	r3, [r4, #28]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	5959      	ldr	r1, [r3, r5]
 8005f6c:	b9b1      	cbnz	r1, 8005f9c <_reclaim_reent+0x4c>
 8005f6e:	3504      	adds	r5, #4
 8005f70:	2d80      	cmp	r5, #128	@ 0x80
 8005f72:	d1f8      	bne.n	8005f66 <_reclaim_reent+0x16>
 8005f74:	69e3      	ldr	r3, [r4, #28]
 8005f76:	4620      	mov	r0, r4
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	f000 f87b 	bl	8006074 <_free_r>
 8005f7e:	69e3      	ldr	r3, [r4, #28]
 8005f80:	6819      	ldr	r1, [r3, #0]
 8005f82:	b111      	cbz	r1, 8005f8a <_reclaim_reent+0x3a>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 f875 	bl	8006074 <_free_r>
 8005f8a:	69e3      	ldr	r3, [r4, #28]
 8005f8c:	689d      	ldr	r5, [r3, #8]
 8005f8e:	b15d      	cbz	r5, 8005fa8 <_reclaim_reent+0x58>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4620      	mov	r0, r4
 8005f94:	682d      	ldr	r5, [r5, #0]
 8005f96:	f000 f86d 	bl	8006074 <_free_r>
 8005f9a:	e7f8      	b.n	8005f8e <_reclaim_reent+0x3e>
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f868 	bl	8006074 <_free_r>
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	e7e1      	b.n	8005f6c <_reclaim_reent+0x1c>
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x62>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f861 	bl	8006074 <_free_r>
 8005fb2:	69e1      	ldr	r1, [r4, #28]
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x6c>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f85c 	bl	8006074 <_free_r>
 8005fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x76>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f857 	bl	8006074 <_free_r>
 8005fc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0x80>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f852 	bl	8006074 <_free_r>
 8005fd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fd2:	b111      	cbz	r1, 8005fda <_reclaim_reent+0x8a>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f84d 	bl	8006074 <_free_r>
 8005fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fdc:	b111      	cbz	r1, 8005fe4 <_reclaim_reent+0x94>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f848 	bl	8006074 <_free_r>
 8005fe4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fe6:	b111      	cbz	r1, 8005fee <_reclaim_reent+0x9e>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f843 	bl	8006074 <_free_r>
 8005fee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ff0:	b111      	cbz	r1, 8005ff8 <_reclaim_reent+0xa8>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f83e 	bl	8006074 <_free_r>
 8005ff8:	6a23      	ldr	r3, [r4, #32]
 8005ffa:	b11b      	cbz	r3, 8006004 <_reclaim_reent+0xb4>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006002:	4718      	bx	r3
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	bf00      	nop
 8006008:	20000010 	.word	0x20000010

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	@ (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	@ (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	@ (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	@ (8006050 <__libc_init_array+0x44>)
 8006020:	f000 f87e 	bl	8006120 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	080061d8 	.word	0x080061d8
 8006048:	080061d8 	.word	0x080061d8
 800604c:	080061d8 	.word	0x080061d8
 8006050:	080061dc 	.word	0x080061dc

08006054 <__retarget_lock_acquire_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_release_recursive>:
 8006056:	4770      	bx	lr

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d041      	beq.n	8006100 <_free_r+0x8c>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f000 f83e 	bl	8006108 <__malloc_lock>
 800608c:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <_free_r+0x90>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x2c>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	4628      	mov	r0, r5
 8006098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609c:	f000 b83a 	b.w	8006114 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x42>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1809      	addeq	r1, r1, r0
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x1e>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x4c>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x42>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1850      	adds	r0, r2, r1
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x6c>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	4401      	add	r1, r0
 80060cc:	1850      	adds	r0, r2, r1
 80060ce:	4283      	cmp	r3, r0
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x22>
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	4408      	add	r0, r1
 80060dc:	6010      	str	r0, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x22>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x74>
 80060e2:	230c      	movs	r3, #12
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x22>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1809      	addeq	r1, r1, r0
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x22>
 8006100:	bd38      	pop	{r3, r4, r5, pc}
 8006102:	bf00      	nop
 8006104:	20004534 	.word	0x20004534

08006108 <__malloc_lock>:
 8006108:	4801      	ldr	r0, [pc, #4]	@ (8006110 <__malloc_lock+0x8>)
 800610a:	f7ff bfa3 	b.w	8006054 <__retarget_lock_acquire_recursive>
 800610e:	bf00      	nop
 8006110:	20004530 	.word	0x20004530

08006114 <__malloc_unlock>:
 8006114:	4801      	ldr	r0, [pc, #4]	@ (800611c <__malloc_unlock+0x8>)
 8006116:	f7ff bf9e 	b.w	8006056 <__retarget_lock_release_recursive>
 800611a:	bf00      	nop
 800611c:	20004530 	.word	0x20004530

08006120 <_init>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr

0800612c <_fini>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr
